/* The following code was generated by JFlex 1.6.1 */

/* Analisador lexico para a disciplina de Compiladores 
2015.1 - Grupo : Caio Batista
                 Carlos Interaminense
                 Rafael Paulino
*/
                 


import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>java_lex.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\4\1\3\1\105\1\106\1\2\16\6\4\0\1\4\1\70"+
    "\1\103\1\0\1\5\1\100\1\74\1\104\1\55\1\56\1\10\1\76"+
    "\1\64\1\23\1\21\1\7\1\11\1\20\2\16\4\17\2\12\1\73"+
    "\1\63\1\67\1\65\1\66\1\72\1\0\3\15\1\102\1\22\1\101"+
    "\5\5\1\13\6\5\1\54\4\5\1\14\2\5\1\61\1\1\1\62"+
    "\1\77\1\5\1\0\1\26\1\43\1\24\1\34\1\30\1\41\1\51"+
    "\1\47\1\35\1\5\1\44\1\25\1\36\1\33\1\45\1\37\1\5"+
    "\1\40\1\27\1\32\1\46\1\52\1\42\1\31\1\50\1\53\1\57"+
    "\1\75\1\60\1\71\6\6\1\107\32\6\2\0\4\5\4\0\1\5"+
    "\2\0\1\6\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"+
    "\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5"+
    "\21\0\160\6\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0"+
    "\3\5\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0"+
    "\5\6\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5\11\0"+
    "\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\10\0"+
    "\33\5\5\0\3\5\15\0\4\6\7\0\1\5\4\0\13\6\5\0"+
    "\53\5\37\6\4\0\2\5\1\6\143\5\1\0\1\5\10\6\1\0"+
    "\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5\2\0\1\5"+
    "\17\0\1\6\1\5\1\6\36\5\33\6\2\0\131\5\13\6\1\5"+
    "\16\0\12\6\41\5\11\6\2\5\4\0\1\5\5\0\26\5\4\6"+
    "\1\5\11\6\1\5\3\6\1\5\5\6\22\0\31\5\3\6\244\0"+
    "\4\6\66\5\3\6\1\5\22\6\1\5\7\6\12\5\2\6\2\0"+
    "\12\6\1\0\7\5\1\0\7\5\1\0\3\6\1\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0"+
    "\1\6\1\5\7\6\2\0\2\6\2\0\3\6\1\5\10\0\1\6"+
    "\4\0\2\5\1\0\3\5\2\6\2\0\12\6\4\5\7\0\1\5"+
    "\5\0\3\6\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6"+
    "\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\5\1\0\1\5"+
    "\7\0\14\6\3\5\1\6\13\0\3\6\1\0\11\5\1\0\3\5"+
    "\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6"+
    "\1\5\10\6\1\0\3\6\1\0\3\6\2\0\1\5\17\0\2\5"+
    "\2\6\2\0\12\6\1\0\1\5\17\0\3\6\1\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0"+
    "\1\6\1\5\7\6\2\0\2\6\2\0\3\6\10\0\2\6\4\0"+
    "\2\5\1\0\3\5\2\6\2\0\12\6\1\0\1\5\20\0\1\6"+
    "\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0"+
    "\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0\1\6\16\0"+
    "\12\6\11\0\1\5\7\0\3\6\1\0\10\5\1\0\3\5\1\0"+
    "\27\5\1\0\12\5\1\0\5\5\3\0\1\5\7\6\1\0\3\6"+
    "\1\0\4\6\7\0\2\6\1\0\2\5\6\0\2\5\2\6\2\0"+
    "\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\2\0\1\6\1\5\7\6\1\0\3\6\1\0"+
    "\4\6\7\0\2\6\7\0\1\5\1\0\2\5\2\6\2\0\12\6"+
    "\1\0\2\5\17\0\2\6\1\0\10\5\1\0\3\5\1\0\51\5"+
    "\2\0\1\5\7\6\1\0\3\6\1\0\4\6\1\5\10\0\1\6"+
    "\10\0\2\5\2\6\2\0\12\6\12\0\6\5\2\0\2\6\1\0"+
    "\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0"+
    "\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0\2\6\15\0"+
    "\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0\12\6\47\0"+
    "\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0"+
    "\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0"+
    "\2\5\1\0\4\5\1\6\2\5\6\6\1\0\2\6\1\5\2\0"+
    "\5\5\1\0\1\5\1\0\6\6\2\0\12\6\2\0\2\5\42\0"+
    "\1\5\27\0\2\6\6\0\12\6\13\0\1\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\10\5\1\0\44\5\4\0\24\6\1\0\2\6"+
    "\5\5\13\6\1\0\44\6\11\0\1\6\71\0\53\5\24\6\1\5"+
    "\12\6\6\0\6\5\4\6\4\5\3\6\1\5\3\6\2\5\7\6"+
    "\3\5\4\6\15\5\14\6\1\5\17\6\2\0\46\5\12\0\53\5"+
    "\1\0\1\5\3\0\u0149\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5"+
    "\2\0\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5"+
    "\1\0\4\5\2\0\103\5\2\0\3\6\40\0\20\5\20\0\125\5"+
    "\14\0\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5\3\0\3\5"+
    "\17\0\15\5\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5"+
    "\2\6\14\0\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6"+
    "\3\0\1\5\3\0\2\5\1\6\2\0\12\6\41\0\3\6\2\0"+
    "\12\6\6\0\130\5\10\0\51\5\1\6\1\5\5\0\106\5\12\0"+
    "\35\5\3\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5"+
    "\13\0\54\5\4\0\21\6\7\5\2\6\6\0\12\6\46\0\27\5"+
    "\5\6\4\0\65\5\12\6\1\0\35\6\2\0\13\6\6\0\12\6"+
    "\15\0\1\5\130\0\5\6\57\5\21\6\7\5\4\0\12\6\21\0"+
    "\11\6\14\0\3\6\36\5\12\6\3\0\2\5\12\6\6\0\46\5"+
    "\16\6\14\0\44\5\24\6\10\0\12\6\3\0\3\5\12\6\44\5"+
    "\122\0\3\6\1\0\25\6\4\5\1\6\4\5\1\6\15\0\300\5"+
    "\47\6\25\0\4\6\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5"+
    "\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5"+
    "\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5"+
    "\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5"+
    "\16\0\5\6\30\0\1\105\1\105\5\6\20\0\2\5\23\0\1\5"+
    "\13\0\5\6\5\0\6\6\1\0\1\5\15\0\1\5\20\0\15\5"+
    "\3\0\32\5\26\0\15\6\4\0\1\6\3\0\14\6\21\0\1\5"+
    "\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5"+
    "\5\0\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0\57\5"+
    "\1\0\205\5\6\0\4\5\3\6\16\0\46\5\12\0\66\5\11\0"+
    "\1\5\17\0\1\6\27\5\11\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\40\6\57\0\1\5\u01d5\0\3\5\31\0\11\5\6\6\1\0"+
    "\5\5\2\0\5\5\4\0\126\5\2\0\2\6\2\0\3\5\1\0"+
    "\132\5\1\0\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0"+
    "\20\5\u0200\0\u19b6\5\112\0\u51cc\5\64\0\u048d\5\103\0\56\5\2\0"+
    "\u010d\5\3\0\20\5\12\6\2\5\24\0\57\5\1\6\14\0\2\6"+
    "\1\0\31\5\10\0\120\5\2\6\45\0\11\5\2\0\147\5\2\0"+
    "\4\5\1\0\2\5\16\0\12\5\120\0\10\5\1\6\3\5\1\6"+
    "\4\5\1\6\27\5\5\6\20\0\1\5\7\0\64\5\14\0\2\6"+
    "\62\5\21\6\13\0\12\6\6\0\22\6\6\5\3\0\1\5\4\0"+
    "\12\6\34\5\10\6\2\0\27\5\15\6\14\0\35\5\3\0\4\6"+
    "\57\5\16\6\16\0\1\5\12\6\46\0\51\5\16\6\11\0\3\5"+
    "\1\6\10\5\2\6\2\0\12\6\6\0\27\5\3\0\1\5\1\6"+
    "\4\0\60\5\1\6\1\5\3\6\2\5\2\6\5\5\2\6\1\5"+
    "\1\6\1\5\30\0\3\5\43\0\6\5\2\0\6\5\2\0\6\5"+
    "\11\0\7\5\1\0\7\5\221\0\43\5\10\6\1\0\2\6\2\0"+
    "\12\6\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u012e\5\2\0"+
    "\76\5\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\6"+
    "\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0"+
    "\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0"+
    "\15\5\3\0\20\6\20\0\7\6\14\0\2\5\30\0\3\5\31\0"+
    "\1\5\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0"+
    "\12\6\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5\3\0"+
    "\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0"+
    "\2\5\22\0\3\6\4\0\14\5\1\0\32\5\1\0\23\5\1\0"+
    "\2\5\1\0\17\5\2\0\16\5\42\0\173\5\105\0\65\5\210\0"+
    "\1\6\202\0\35\5\3\0\61\5\57\0\37\5\21\0\33\5\65\0"+
    "\36\5\2\0\44\5\4\0\10\5\1\0\5\5\52\0\236\5\2\0"+
    "\12\6\u0356\0\6\5\2\0\1\5\1\0\54\5\1\0\2\5\3\0"+
    "\1\5\2\0\27\5\252\0\26\5\12\0\32\5\306\0\1\5\3\6"+
    "\1\0\2\6\5\0\4\6\4\5\1\0\3\5\1\0\33\5\4\0"+
    "\3\6\4\0\1\6\40\0\35\5\203\0\66\5\12\0\26\5\12\0"+
    "\23\5\215\0\111\5\u03b7\0\3\6\65\5\17\6\37\0\12\6\20\0"+
    "\3\6\55\5\13\6\2\0\1\6\u0f42\0\u036f\5\221\0\143\5\u0b9d\0"+
    "\u042f\5\u33d1\0\u0239\5\u45c7\0\2\5\u2163\0\5\6\3\0\26\6\2\0"+
    "\7\6\36\0\4\6\224\0\3\6\u01bb\0\125\5\1\0\107\5\1\0"+
    "\2\5\2\0\1\5\2\0\2\5\2\0\4\5\1\0\14\5\1\0"+
    "\1\5\1\0\7\5\1\0\101\5\1\0\4\5\2\0\10\5\1\0"+
    "\7\5\1\0\34\5\1\0\4\5\1\0\5\5\1\0\1\5\3\0"+
    "\7\5\1\0\u0154\5\2\0\31\5\1\0\31\5\1\0\37\5\1\0"+
    "\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0"+
    "\37\5\1\0\31\5\1\0\10\5\2\0\62\6\u2800\0\ua6d7\5\51\0"+
    "\u1035\5\13\0\336\5\u3fe2\0\u021e\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\20\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\1"+
    "\2\36\1\37\1\2\1\0\1\40\1\41\1\42\1\0"+
    "\1\43\1\0\3\42\1\0\1\44\1\45\1\46\23\3"+
    "\1\47\2\3\1\50\16\3\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\0\1\100\2\101\2\42\1\44"+
    "\1\102\1\103\21\3\1\104\3\3\1\105\4\3\1\106"+
    "\11\3\1\107\7\3\1\110\1\111\1\112\1\113\1\101"+
    "\2\42\1\3\1\114\2\3\1\115\1\116\7\3\1\117"+
    "\2\3\1\120\1\121\2\3\1\122\21\3\1\123\1\3"+
    "\1\124\1\3\1\101\2\42\1\125\1\126\5\3\1\127"+
    "\1\130\3\3\1\131\14\3\1\132\1\133\1\134\1\135"+
    "\1\136\3\3\1\101\2\42\2\3\1\137\1\3\1\140"+
    "\3\3\1\141\1\3\1\142\3\3\1\143\3\3\1\144"+
    "\1\145\3\3\1\146\1\101\2\42\4\3\1\147\1\3"+
    "\1\150\3\3\1\151\1\152\1\3\1\153\1\154\1\3"+
    "\1\101\2\42\1\155\1\156\1\157\6\3\1\160\1\101"+
    "\2\42\1\3\1\161\1\3\1\162\1\3\1\163\1\101"+
    "\2\42\1\3\1\164\1\165\1\0\2\42\1\3\1\0"+
    "\2\42\1\166\1\0\2\42\1\0\2\42\1\0\2\42"+
    "\1\0\2\42\1\0\1\42\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\220\0\u0120\0\u0168\0\u01b0"+
    "\0\u01f8\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0"+
    "\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630"+
    "\0\u0678\0\u06c0\0\u0708\0\u0750\0\220\0\220\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\u0798\0\u07e0\0\u0828\0\u0870"+
    "\0\220\0\220\0\220\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8"+
    "\0\u0a20\0\u0a68\0\u0ab0\0\220\0\220\0\u0af8\0\u0b40\0\220"+
    "\0\220\0\u0b88\0\u0bd0\0\220\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0"+
    "\0\u0d38\0\u0d80\0\220\0\220\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0"+
    "\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0"+
    "\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320"+
    "\0\u1368\0\u13b0\0\u0120\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518"+
    "\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758"+
    "\0\u17a0\0\220\0\220\0\u17e8\0\220\0\u1830\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\220\0\220\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\220\0\220\0\220\0\220"+
    "\0\u1878\0\220\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\220"+
    "\0\220\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8"+
    "\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18"+
    "\0\u1e60\0\u1ea8\0\u0120\0\u1ef0\0\u1f38\0\u1f80\0\u0120\0\u1fc8"+
    "\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208"+
    "\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u0120\0\u23b8\0\u2400"+
    "\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568\0\220\0\220\0\220"+
    "\0\220\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u0120\0\u26d0\0\u2718"+
    "\0\u0120\0\u0120\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8"+
    "\0\u2910\0\u0120\0\u2958\0\u29a0\0\u0120\0\u0120\0\u29e8\0\u2a30"+
    "\0\u0120\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28"+
    "\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u2e68"+
    "\0\u2eb0\0\u2ef8\0\u0120\0\u2f40\0\u0120\0\u2f88\0\u2fd0\0\u3018"+
    "\0\u3060\0\u0120\0\u0120\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8"+
    "\0\u0120\0\u0120\0\u3210\0\u3258\0\u32a0\0\u0120\0\u32e8\0\u3330"+
    "\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570"+
    "\0\u35b8\0\u3600\0\u0120\0\u0120\0\u3648\0\u0120\0\u0120\0\u3690"+
    "\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u0120"+
    "\0\u38d0\0\u0120\0\u3918\0\u3960\0\u39a8\0\u0120\0\u39f0\0\u0120"+
    "\0\u3a38\0\u3a80\0\u3ac8\0\u0120\0\u3b10\0\u3b58\0\u3ba0\0\u0120"+
    "\0\u0120\0\u3be8\0\u3c30\0\u3c78\0\u0120\0\u3cc0\0\u3d08\0\u3d50"+
    "\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u0120\0\u3eb8\0\u0120\0\u3f00"+
    "\0\u3f48\0\u3f90\0\u0120\0\u0120\0\u3fd8\0\u0120\0\u0120\0\u4020"+
    "\0\u4068\0\u40b0\0\u40f8\0\u0120\0\u0120\0\u0120\0\u4140\0\u4188"+
    "\0\u41d0\0\u4218\0\u4260\0\u42a8\0\u0120\0\u42f0\0\u4338\0\u4380"+
    "\0\u43c8\0\u0120\0\u4410\0\u0120\0\u4458\0\u0120\0\u44a0\0\u44e8"+
    "\0\u4530\0\u4578\0\u0120\0\u0120\0\u45c0\0\u4608\0\u4650\0\u4698"+
    "\0\u46e0\0\u4728\0\u4770\0\u0120\0\u47b8\0\u4800\0\u4848\0\u4890"+
    "\0\u48d8\0\u4920\0\u4968\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u4ad0"+
    "\0\u4b18\0\u4b60\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8"+
    "\0\u4d10";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\2\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\3\6\3\12\1\13\1\6\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\6\1\22\1\23\1\24\1\25"+
    "\1\6\1\26\1\27\1\30\1\31\1\32\6\6\1\33"+
    "\1\6\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\2\6\3\3"+
    "\1\5\1\3\1\61\1\62\1\63\1\64\77\61\1\65"+
    "\4\61\113\0\1\5\111\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\31\6\24\0\2\6\4\0\1\6\7\0"+
    "\1\66\1\67\54\0\1\70\107\0\1\71\33\0\1\72"+
    "\1\73\1\74\1\75\1\0\1\76\1\77\1\100\1\101"+
    "\1\102\2\0\1\74\2\0\1\102\1\75\67\0\2\12"+
    "\1\74\2\0\3\12\1\101\1\102\2\0\1\74\2\0"+
    "\1\102\70\0\2\101\3\0\3\101\112\0\1\103\41\0"+
    "\1\104\27\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\105\1\106\16\6\1\107\1\6\1\110\5\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\21\6\1\111\7\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\17\6\1\112\11\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\6\6"+
    "\1\113\7\6\1\114\3\6\1\115\1\116\1\117\4\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\120\3\6\1\121\23\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\14\6\1\122\6\6\1\123\5\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\2\6\1\124\1\6\1\125\15\6"+
    "\1\126\6\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\4\6\1\127\14\6"+
    "\1\130\7\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\7\6\1\131\2\6"+
    "\1\132\2\6\1\133\13\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\2\6"+
    "\1\134\11\6\1\135\5\6\1\136\6\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\4\6\1\137\24\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\140\1\141\6\6\1\142\7\6\1\143\7\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\23\6\1\144\5\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\14\6\1\145\4\6\1\146\2\6\1\147\4\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\21\6\1\150\7\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\6\6\1\151\22\6\24\0\2\6\4\0\1\6\65\0"+
    "\1\152\107\0\1\153\1\154\106\0\1\155\1\0\1\156"+
    "\105\0\1\157\107\0\1\160\6\0\1\161\100\0\1\162"+
    "\7\0\1\163\77\0\1\164\10\0\1\165\76\0\1\166"+
    "\107\0\1\167\22\0\1\61\3\0\77\61\1\0\4\61"+
    "\1\170\1\171\2\0\26\170\1\172\1\173\4\170\1\174"+
    "\1\175\1\170\1\176\37\170\1\177\1\200\6\0\1\64"+
    "\104\0\2\66\1\4\1\5\104\66\10\67\1\201\77\67"+
    "\11\0\1\72\1\73\1\202\2\0\1\76\1\77\1\100"+
    "\1\101\1\102\2\0\1\202\2\0\1\102\70\0\2\73"+
    "\3\0\3\73\1\101\1\102\5\0\1\102\70\0\1\203"+
    "\1\204\2\0\4\204\1\0\1\204\1\0\1\204\1\0"+
    "\1\204\1\0\1\204\3\0\1\204\4\0\1\204\1\0"+
    "\1\204\35\0\2\204\16\0\1\205\1\73\1\202\2\0"+
    "\3\205\1\101\1\102\2\0\1\202\2\0\1\102\70\0"+
    "\1\206\1\73\1\202\2\0\3\206\1\101\1\102\2\0"+
    "\1\202\2\0\1\102\70\0\1\77\1\73\1\202\2\0"+
    "\3\77\1\101\1\102\2\0\1\202\2\0\1\102\70\0"+
    "\2\101\3\0\3\101\1\0\1\102\5\0\1\102\70\0"+
    "\2\207\3\0\3\207\2\0\1\207\10\0\1\210\4\0"+
    "\1\211\34\0\1\207\2\0\1\211\1\210\12\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\2\6\1\212\26\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\3\6\1\213\2\6\1\214\22\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\7\6\1\215\21\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\2\6\1\216\26\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\7\6"+
    "\1\217\21\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\3\6\1\220\25\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\2\6\1\221\11\6\1\222\14\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\11\6\1\223\17\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\13\6\1\224\15\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\21\6"+
    "\1\225\7\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\7\6\1\226\21\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\3\6\1\227\25\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\6\6\1\230\22\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\2\6"+
    "\1\231\17\6\1\232\1\6\1\233\4\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\11\6\1\234\2\6\1\235\14\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\6\6\1\236\22\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\16\6"+
    "\1\237\12\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\240\27\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\15\6\1\241\13\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\22\6\1\242\6\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\3\6"+
    "\1\243\2\6\1\244\22\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\13\6"+
    "\1\245\15\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\246\30\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\11\6\1\247\7\6\1\250\7\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\17\6\1\251\11\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\6\6\1\252\22\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\21\6\1\253"+
    "\7\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\254\27\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\7\6\1\255\21\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\14\6\1\256\14\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\11\6\1\257"+
    "\17\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\4\6\1\260\24\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\21\6\1\261\7\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\6\6\1\262\22\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\1\6\1\263"+
    "\7\6\1\264\17\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\14\6\1\265"+
    "\14\6\24\0\2\6\4\0\1\6\65\0\1\266\1\267"+
    "\106\0\1\270\22\0\7\67\1\5\1\201\77\67\11\0"+
    "\1\203\1\204\1\271\1\0\4\204\1\0\1\204\1\0"+
    "\1\204\1\271\1\204\1\0\1\204\3\0\1\204\4\0"+
    "\1\204\1\0\1\204\35\0\2\204\16\0\2\272\1\271"+
    "\1\0\4\272\1\0\1\272\1\0\1\272\1\271\1\272"+
    "\1\0\1\272\3\0\1\272\4\0\1\272\1\0\1\272"+
    "\35\0\2\272\16\0\1\273\1\73\1\202\2\0\3\273"+
    "\1\101\1\102\2\0\1\202\2\0\1\102\70\0\1\274"+
    "\1\73\1\202\2\0\3\274\1\101\1\102\2\0\1\202"+
    "\2\0\1\102\70\0\2\207\3\0\3\207\13\0\1\210"+
    "\4\0\1\211\37\0\1\211\1\210\12\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\3\6\1\275\25\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\4\6\1\276\24\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\277\30\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\6\6\1\300\22\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\14\6\1\301\14\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\25\6\1\302\3\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\6\6"+
    "\1\303\22\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\6\6\1\304\22\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\11\6\1\305\17\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\6\6\1\306\22\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\4\6"+
    "\1\307\24\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\14\6\1\310\14\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\311\30\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\4\6\1\312\24\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\4\6\1\313"+
    "\24\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\7\6\1\314\21\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\4\6\1\315\24\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\3\6\1\316\25\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\21\6\1\317"+
    "\7\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\11\6\1\320\17\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\321\27\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\2\6\1\322\26\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\17\6\1\323"+
    "\11\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\6\6\1\324\22\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\4\6\1\325\24\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\326\17\6\1\327\7\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\20\6\1\330\10\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\26\6\1\331"+
    "\2\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\6\6\1\332\22\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\333\27\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\22\6\1\334\6\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\2\6\1\335"+
    "\26\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\3\6\1\336\25\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\2\6\1\337\26\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\340\27\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\2\6\1\341"+
    "\26\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\342\27\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\4\6\1\343\24\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\2\6\1\344\26\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\10\6\1\345"+
    "\20\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\11\6\1\346\17\6\24\0"+
    "\2\6\4\0\1\6\11\0\2\347\1\271\1\0\4\347"+
    "\1\0\1\347\1\0\1\347\1\271\1\347\1\0\1\347"+
    "\3\0\1\347\4\0\1\347\1\0\1\347\35\0\2\347"+
    "\16\0\1\350\1\73\1\202\2\0\3\350\1\101\1\102"+
    "\2\0\1\202\2\0\1\102\70\0\1\351\1\73\1\202"+
    "\2\0\3\351\1\101\1\102\2\0\1\202\2\0\1\102"+
    "\64\0\2\6\2\0\10\6\1\0\1\6\1\0\3\6"+
    "\1\352\25\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\23\6\1\353\5\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\11\6\1\354\17\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\14\6\1\355\14\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\11\6"+
    "\1\356\17\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\357\30\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\360\30\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\14\6"+
    "\1\361\14\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\6\6\1\362\22\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\23\6\1\363\5\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\7\6\1\364\21\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\3\6"+
    "\1\365\25\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\16\6\1\366\12\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\26\6\1\367\2\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\22\6\1\370\6\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\371\27\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\2\6\1\372\26\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\14\6\1\373\14\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\4\6\1\374\24\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\14\6"+
    "\1\375\14\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\2\6\1\376\26\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\2\6\1\377\26\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\4\6\1\u0100\24\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\11\6"+
    "\1\u0101\17\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\14\6\1\u0102\14\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\6\6\1\u0103\22\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\4\6\1\u0104\24\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\u0105\27\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\4\6\1\u0106\24\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\20\6\1\u0107\10\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\4\6\1\u0108\24\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\6\6"+
    "\1\u0109\22\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\7\6\1\u010a\21\6"+
    "\24\0\2\6\4\0\1\6\11\0\2\u010b\1\271\1\0"+
    "\4\u010b\1\0\1\u010b\1\0\1\u010b\1\271\1\u010b\1\0"+
    "\1\u010b\3\0\1\u010b\4\0\1\u010b\1\0\1\u010b\35\0"+
    "\2\u010b\16\0\1\u010c\1\73\1\202\2\0\3\u010c\1\101"+
    "\1\102\2\0\1\202\2\0\1\102\70\0\1\u010d\1\73"+
    "\1\202\2\0\3\u010d\1\101\1\102\2\0\1\202\2\0"+
    "\1\102\64\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\7\6\1\u010e\21\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\2\6\1\u010f"+
    "\26\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\u0110\30\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\6\6\1\u0111\22\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\23\6"+
    "\1\u0112\5\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\14\6\1\u0113\14\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\10\6\1\u0114\20\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\11\6\1\u0115\17\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\4\6"+
    "\1\u0116\24\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\u0117\27\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\4\6\1\u0118\24\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\7\6\1\u0119\21\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\15\6"+
    "\1\u011a\13\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\12\6\1\u011b\16\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\6\6\1\u011c\22\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\25\6\1\u011d\3\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\6\6"+
    "\1\u011e\22\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\u011f\30\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\u0120\30\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\7\6"+
    "\1\u0121\21\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\u0122\27\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\2\6\1\u0123\26\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\11\6\1\u0124\17\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\25\6"+
    "\1\u0125\3\6\24\0\2\6\4\0\1\6\11\0\2\u0126"+
    "\1\271\1\0\4\u0126\1\0\1\u0126\1\0\1\u0126\1\271"+
    "\1\u0126\1\0\1\u0126\3\0\1\u0126\4\0\1\u0126\1\0"+
    "\1\u0126\35\0\2\u0126\16\0\1\u0127\1\73\1\202\2\0"+
    "\3\u0127\1\101\1\102\2\0\1\202\2\0\1\102\70\0"+
    "\1\u0128\1\73\1\202\2\0\3\u0128\1\101\1\102\2\0"+
    "\1\202\2\0\1\102\64\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\22\6\1\u0129\6\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\u012a\30\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\15\6\1\u012b\13\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\21\6\1\u012c\7\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\3\6\1\u012d\25\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\4\6"+
    "\1\u012e\24\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\6\6\1\u012f\22\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\u0130\30\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\2\6\1\u0131\26\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\4\6\1\u0132"+
    "\24\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\4\6\1\u0133\24\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\4\6\1\u0134\24\6\24\0\2\6\4\0"+
    "\1\6\5\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\6\6\1\u0135\22\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\24\6\1\u0136"+
    "\4\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\7\6\1\u0137\21\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\u0138\27\6\24\0\2\6\4\0"+
    "\1\6\11\0\2\u0139\1\271\1\0\4\u0139\1\0\1\u0139"+
    "\1\0\1\u0139\1\271\1\u0139\1\0\1\u0139\3\0\1\u0139"+
    "\4\0\1\u0139\1\0\1\u0139\35\0\2\u0139\16\0\1\u013a"+
    "\1\73\1\202\2\0\3\u013a\1\101\1\102\2\0\1\202"+
    "\2\0\1\102\70\0\1\u013b\1\73\1\202\2\0\3\u013b"+
    "\1\101\1\102\2\0\1\202\2\0\1\102\64\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\4\6\1\u013c\24\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\6\6\1\u013d\22\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\13\6\1\u013e\15\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\7\6"+
    "\1\u013f\21\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\7\6\1\u0140\21\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\4\6\1\u0141\24\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\u0142\30\6\24\0\2\6\4\0\1\6\5\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\7\6\1\u0143"+
    "\21\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\4\6\1\u0144\24\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\4\6\1\u0145\24\6\24\0\2\6\4\0"+
    "\1\6\11\0\2\u0146\1\271\1\0\4\u0146\1\0\1\u0146"+
    "\1\0\1\u0146\1\271\1\u0146\1\0\1\u0146\3\0\1\u0146"+
    "\4\0\1\u0146\1\0\1\u0146\35\0\2\u0146\16\0\1\u0147"+
    "\1\73\1\202\2\0\3\u0147\1\101\1\102\2\0\1\202"+
    "\2\0\1\102\70\0\1\u0148\1\73\1\202\2\0\3\u0148"+
    "\1\101\1\102\2\0\1\202\2\0\1\102\64\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\11\6\1\u0149\17\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\6\6\1\u014a\22\6\24\0\2\6"+
    "\4\0\1\6\5\0\2\6\2\0\10\6\1\0\1\6"+
    "\1\0\21\6\1\u014b\7\6\24\0\2\6\4\0\1\6"+
    "\5\0\2\6\2\0\10\6\1\0\1\6\1\0\4\6"+
    "\1\u014c\24\6\24\0\2\6\4\0\1\6\5\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\6\6\1\u014d\22\6"+
    "\24\0\2\6\4\0\1\6\5\0\2\6\2\0\10\6"+
    "\1\0\1\6\1\0\10\6\1\u014e\20\6\24\0\2\6"+
    "\4\0\1\6\11\0\2\u014f\1\271\1\0\4\u014f\1\0"+
    "\1\u014f\1\0\1\u014f\1\271\1\u014f\1\0\1\u014f\3\0"+
    "\1\u014f\4\0\1\u014f\1\0\1\u014f\35\0\2\u014f\16\0"+
    "\1\u0150\1\73\1\202\2\0\3\u0150\1\101\1\102\2\0"+
    "\1\202\2\0\1\102\70\0\1\u0151\1\73\1\202\2\0"+
    "\3\u0151\1\101\1\102\2\0\1\202\2\0\1\102\64\0"+
    "\2\6\2\0\10\6\1\0\1\6\1\0\27\6\1\u0152"+
    "\1\6\24\0\2\6\4\0\1\6\5\0\2\6\2\0"+
    "\10\6\1\0\1\6\1\0\15\6\1\u0153\13\6\24\0"+
    "\2\6\4\0\1\6\5\0\2\6\2\0\10\6\1\0"+
    "\1\6\1\0\3\6\1\u0154\25\6\24\0\2\6\4\0"+
    "\1\6\11\0\2\u0155\1\271\1\0\4\u0155\1\0\1\u0155"+
    "\1\0\1\u0155\1\271\1\u0155\1\0\1\u0155\3\0\1\u0155"+
    "\4\0\1\u0155\1\0\1\u0155\35\0\2\u0155\16\0\1\u0156"+
    "\1\73\1\202\2\0\3\u0156\1\101\1\102\2\0\1\202"+
    "\2\0\1\102\70\0\1\u0157\1\73\1\202\2\0\3\u0157"+
    "\1\101\1\102\2\0\1\202\2\0\1\102\64\0\2\6"+
    "\2\0\10\6\1\0\1\6\1\0\4\6\1\u0158\24\6"+
    "\24\0\2\6\4\0\1\6\11\0\2\u0159\1\271\1\0"+
    "\4\u0159\1\0\1\u0159\1\0\1\u0159\1\271\1\u0159\1\0"+
    "\1\u0159\3\0\1\u0159\4\0\1\u0159\1\0\1\u0159\35\0"+
    "\2\u0159\16\0\1\u015a\1\73\1\202\2\0\3\u015a\1\101"+
    "\1\102\2\0\1\202\2\0\1\102\70\0\1\u015b\1\73"+
    "\1\202\2\0\3\u015b\1\101\1\102\2\0\1\202\2\0"+
    "\1\102\64\0\2\6\2\0\10\6\1\0\1\6\1\0"+
    "\10\6\1\u015c\20\6\24\0\2\6\4\0\1\6\11\0"+
    "\2\u015d\1\271\1\0\4\u015d\1\0\1\u015d\1\0\1\u015d"+
    "\1\271\1\u015d\1\0\1\u015d\3\0\1\u015d\4\0\1\u015d"+
    "\1\0\1\u015d\35\0\2\u015d\16\0\1\u015e\1\73\1\202"+
    "\2\0\3\u015e\1\101\1\102\2\0\1\202\2\0\1\102"+
    "\70\0\1\u015f\1\73\1\202\2\0\3\u015f\1\101\1\102"+
    "\2\0\1\202\2\0\1\102\70\0\2\u0160\1\271\1\0"+
    "\4\u0160\1\0\1\u0160\1\0\1\u0160\1\271\1\u0160\1\0"+
    "\1\u0160\3\0\1\u0160\4\0\1\u0160\1\0\1\u0160\35\0"+
    "\2\u0160\16\0\1\u0161\1\73\1\202\2\0\3\u0161\1\101"+
    "\1\102\2\0\1\202\2\0\1\102\70\0\1\u0162\1\73"+
    "\1\202\2\0\3\u0162\1\101\1\102\2\0\1\202\2\0"+
    "\1\102\70\0\2\u0163\1\271\1\0\4\u0163\1\0\1\u0163"+
    "\1\0\1\u0163\1\271\1\u0163\1\0\1\u0163\3\0\1\u0163"+
    "\4\0\1\u0163\1\0\1\u0163\35\0\2\u0163\16\0\1\u0164"+
    "\1\73\1\202\2\0\3\u0164\1\101\1\102\2\0\1\202"+
    "\2\0\1\102\70\0\1\u0165\1\73\1\202\2\0\3\u0165"+
    "\1\101\1\102\2\0\1\202\2\0\1\102\70\0\2\u0166"+
    "\1\271\1\0\4\u0166\1\0\1\u0166\1\0\1\u0166\1\271"+
    "\1\u0166\1\0\1\u0166\3\0\1\u0166\4\0\1\u0166\1\0"+
    "\1\u0166\35\0\2\u0166\16\0\1\u0167\1\73\1\202\2\0"+
    "\3\u0167\1\101\1\102\2\0\1\202\2\0\1\102\70\0"+
    "\1\u0168\1\73\1\202\2\0\3\u0168\1\101\1\102\2\0"+
    "\1\202\2\0\1\102\70\0\2\u0169\1\271\1\0\4\u0169"+
    "\1\0\1\u0169\1\0\1\u0169\1\271\1\u0169\1\0\1\u0169"+
    "\3\0\1\u0169\4\0\1\u0169\1\0\1\u0169\35\0\2\u0169"+
    "\16\0\1\u016a\1\73\1\202\2\0\3\u016a\1\101\1\102"+
    "\2\0\1\202\2\0\1\102\70\0\1\u016b\1\73\1\202"+
    "\2\0\3\u016b\1\101\1\102\2\0\1\202\2\0\1\102"+
    "\70\0\2\u016c\1\271\1\0\4\u016c\1\0\1\u016c\1\0"+
    "\1\u016c\1\271\1\u016c\1\0\1\u016c\3\0\1\u016c\4\0"+
    "\1\u016c\1\0\1\u016c\35\0\2\u016c\16\0\1\u016d\1\73"+
    "\1\202\2\0\3\u016d\1\101\1\102\2\0\1\202\2\0"+
    "\1\102\72\0\1\271\11\0\1\271\73\0\1\u016e\1\73"+
    "\1\202\2\0\3\u016e\1\101\1\102\2\0\1\202\2\0"+
    "\1\102\70\0\1\u016f\1\73\1\202\2\0\3\u016f\1\101"+
    "\1\102\2\0\1\202\2\0\1\102\70\0\1\u0170\1\73"+
    "\1\202\2\0\3\u0170\1\101\1\102\2\0\1\202\2\0"+
    "\1\102\70\0\1\u0171\1\73\1\202\2\0\3\u0171\1\101"+
    "\1\102\2\0\1\202\2\0\1\102\70\0\2\73\1\202"+
    "\2\0\3\73\1\101\1\102\2\0\1\202\2\0\1\102"+
    "\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\27\1\10\11\4\1\3\11"+
    "\10\1\2\11\1\1\1\0\2\11\1\1\1\0\1\11"+
    "\1\0\3\1\1\0\1\1\2\11\45\1\2\11\1\1"+
    "\1\11\1\1\22\11\1\0\1\11\5\1\2\11\54\1"+
    "\4\11\233\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();  

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2650) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                             "\" at line "+yyline+", column "+yycolumn);
            }
          case 119: break;
          case 2: 
            { /*Ignore*/
            }
          case 120: break;
          case 3: 
            { return symbol(sym.ID);
            }
          case 121: break;
          case 4: 
            { return symbol(sym.DIV);
            }
          case 122: break;
          case 5: 
            { return symbol(sym.MULT);
            }
          case 123: break;
          case 6: 
            { return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
            }
          case 124: break;
          case 7: 
            { return symbol(sym.DOT);
            }
          case 125: break;
          case 8: 
            { return symbol(sym.MINUS);
            }
          case 126: break;
          case 9: 
            { return symbol(sym.LPAREN);
            }
          case 127: break;
          case 10: 
            { return symbol(sym.RPAREN);
            }
          case 128: break;
          case 11: 
            { return symbol(sym.LBRACE);
            }
          case 129: break;
          case 12: 
            { return symbol(sym.RBRACE);
            }
          case 130: break;
          case 13: 
            { return symbol(sym.LBRACK);
            }
          case 131: break;
          case 14: 
            { return symbol(sym.RBRACK);
            }
          case 132: break;
          case 15: 
            { return symbol(sym.SEMICOLON);
            }
          case 133: break;
          case 16: 
            { return symbol(sym.COMMA);
            }
          case 134: break;
          case 17: 
            { return symbol(sym.EQUAL);
            }
          case 135: break;
          case 18: 
            { return symbol(sym.GREATER);
            }
          case 136: break;
          case 19: 
            { return symbol(sym.LESS);
            }
          case 137: break;
          case 20: 
            { return symbol(sym.NOT);
            }
          case 138: break;
          case 21: 
            { return symbol(sym.BITNOT);
            }
          case 139: break;
          case 22: 
            { return symbol(sym.QUESTION);
            }
          case 140: break;
          case 23: 
            { return symbol(sym.COLON);
            }
          case 141: break;
          case 24: 
            { return symbol(sym.AND);
            }
          case 142: break;
          case 25: 
            { return symbol(sym.OR);
            }
          case 143: break;
          case 26: 
            { return symbol(sym.PLUS);
            }
          case 144: break;
          case 27: 
            { return symbol(sym.XOR);
            }
          case 145: break;
          case 28: 
            { return symbol(sym.MOD);
            }
          case 146: break;
          case 29: 
            { string.append( yytext() );
            }
          case 147: break;
          case 30: 
            { throw new RuntimeException(
                                       "Unterminated string at end of line");
            }
          case 148: break;
          case 31: 
            { yybegin(YYINITIAL);
                                   return symbol(sym.STRING_LITERAL, 
                                                 string.toString());
            }
          case 149: break;
          case 32: 
            { return symbol(sym.DIVEQ);
            }
          case 150: break;
          case 33: 
            { return symbol(sym.MULTEQ);
            }
          case 151: break;
          case 34: 
            { return symbol(sym.INTEGER_LITERAL, new Integer((int) Long.parseLong(yytext().substring(0, yylength()), 8)));
            }
          case 152: break;
          case 35: 
            { return symbol(sym.INTEGER_LITERAL, new Long(yytext().substring(0, yylength()-1)));
            }
          case 153: break;
          case 36: 
            { return symbol(sym.FLOAT_LITERAL, new Float(yytext()));
            }
          case 154: break;
          case 37: 
            { return symbol(sym.MINUSMINUS);
            }
          case 155: break;
          case 38: 
            { return symbol(sym.MINUSEQ);
            }
          case 156: break;
          case 39: 
            { return symbol(sym.DO);
            }
          case 157: break;
          case 40: 
            { return symbol(sym.IF);
            }
          case 158: break;
          case 41: 
            { return symbol(sym.EQEQ);
            }
          case 159: break;
          case 42: 
            { return symbol(sym.GTEQ);
            }
          case 160: break;
          case 43: 
            { return symbol(sym.RSHIFT);
            }
          case 161: break;
          case 44: 
            { return symbol(sym.LTEQ);
            }
          case 162: break;
          case 45: 
            { return symbol(sym.LSHIFT);
            }
          case 163: break;
          case 46: 
            { return symbol(sym.NOTEQ);
            }
          case 164: break;
          case 47: 
            { return symbol(sym.ANDEQ);
            }
          case 165: break;
          case 48: 
            { return symbol(sym.ANDAND);
            }
          case 166: break;
          case 49: 
            { return symbol(sym.OREQ);
            }
          case 167: break;
          case 50: 
            { return symbol(sym.OROR);
            }
          case 168: break;
          case 51: 
            { return symbol(sym.PLUSEQ);
            }
          case 169: break;
          case 52: 
            { return symbol(sym.PLUSPLUS);
            }
          case 170: break;
          case 53: 
            { return symbol(sym.XOREQ);
            }
          case 171: break;
          case 54: 
            { return symbol(sym.MODEQ);
            }
          case 172: break;
          case 55: 
            { throw new RuntimeException(
                                  "Illegal escape sequence \""+yytext()+"\"");
            }
          case 173: break;
          case 56: 
            { string.append( '\\' );
            }
          case 174: break;
          case 57: 
            { string.append( '\t' );
            }
          case 175: break;
          case 58: 
            { string.append( '\n' );
            }
          case 176: break;
          case 59: 
            { string.append( '\r' );
            }
          case 177: break;
          case 60: 
            { string.append( '\f' );
            }
          case 178: break;
          case 61: 
            { string.append( '\b' );
            }
          case 179: break;
          case 62: 
            { string.append( '\"' );
            }
          case 180: break;
          case 63: 
            { string.append( '\'' );
            }
          case 181: break;
          case 64: 
            { return symbol(sym.INTEGER_LITERAL, new Long( Long.parseLong(yytext().substring(0, yylength()-1), 8)));
            }
          case 182: break;
          case 65: 
            { return symbol(sym.INTEGER_LITERAL, new Integer((int) Long.parseLong(yytext().substring(2, yylength()), 16)));
            }
          case 183: break;
          case 66: 
            { return symbol(sym.FLOAT_LITERAL, new Double(yytext().substring(0, yylength()-1)));
            }
          case 184: break;
          case 67: 
            { return symbol(sym.FLOAT_LITERAL, new Float(yytext().substring(0, yylength()-1)));
            }
          case 185: break;
          case 68: 
            { return symbol(sym.TRY);
            }
          case 186: break;
          case 69: 
            { return symbol(sym.NEW);
            }
          case 187: break;
          case 70: 
            { return symbol(sym.INT);
            }
          case 188: break;
          case 71: 
            { return symbol(sym.FOR);
            }
          case 189: break;
          case 72: 
            { return symbol(sym.RSHIFTEQ);
            }
          case 190: break;
          case 73: 
            { return symbol(sym.URSHIFT);
            }
          case 191: break;
          case 74: 
            { return symbol(sym.LSHIFTEQ);
            }
          case 192: break;
          case 75: 
            { return symbol(sym.INTEGER_LITERAL, new Long( Long.parseLong(yytext().substring(2, yylength()-1), 16)));
            }
          case 193: break;
          case 76: 
            { return symbol(sym.CASE);
            }
          case 194: break;
          case 77: 
            { return symbol(sym.CHAR);
            }
          case 195: break;
          case 78: 
            { return symbol(sym.LONG);
            }
          case 196: break;
          case 79: 
            { return symbol(sym.ELSE);
            }
          case 197: break;
          case 80: 
            { return symbol(sym.TRUE);
            }
          case 198: break;
          case 81: 
            { return symbol(sym.THIS);
            }
          case 199: break;
          case 82: 
            { return symbol(sym.NULL);
            }
          case 200: break;
          case 83: 
            { return symbol(sym.BYTE);
            }
          case 201: break;
          case 84: 
            { return symbol(sym.VOID);
            }
          case 202: break;
          case 85: 
            { return symbol(sym.CLASS);
            }
          case 203: break;
          case 86: 
            { return symbol(sym.CATCH);
            }
          case 204: break;
          case 87: 
            { return symbol(sym.SUPER);
            }
          case 205: break;
          case 88: 
            { return symbol(sym.SHORT);
            }
          case 206: break;
          case 89: 
            { return symbol(sym.THROW);
            }
          case 207: break;
          case 90: 
            { return symbol(sym.FLOAT);
            }
          case 208: break;
          case 91: 
            { return symbol(sym.FALSE);
            }
          case 209: break;
          case 92: 
            { return symbol(sym.FINAL);
            }
          case 210: break;
          case 93: 
            { return symbol(sym.WHILE);
            }
          case 211: break;
          case 94: 
            { return symbol(sym.BREAK);
            }
          case 212: break;
          case 95: 
            { return symbol(sym.STATIC);
            }
          case 213: break;
          case 96: 
            { return symbol(sym.SWITCH);
            }
          case 214: break;
          case 97: 
            { return symbol(sym.NATIVE);
            }
          case 215: break;
          case 98: 
            { return symbol(sym.DOUBLE);
            }
          case 216: break;
          case 99: 
            { return symbol(sym.IMPORT);
            }
          case 217: break;
          case 100: 
            { return symbol(sym.PUBLIC);
            }
          case 218: break;
          case 101: 
            { return symbol(sym.RETURN);
            }
          case 219: break;
          case 102: 
            { return symbol(sym.STRING);
            }
          case 220: break;
          case 103: 
            { return symbol(sym.EXTENDS);
            }
          case 221: break;
          case 104: 
            { return symbol(sym.DEFAULT);
            }
          case 222: break;
          case 105: 
            { return symbol(sym.PACKAGE);
            }
          case 223: break;
          case 106: 
            { return symbol(sym.PRIVATE);
            }
          case 224: break;
          case 107: 
            { return symbol(sym.FINALLY);
            }
          case 225: break;
          case 108: 
            { return symbol(sym.BOOLEAN);
            }
          case 226: break;
          case 109: 
            { return symbol(sym.CONTINUE);
            }
          case 227: break;
          case 110: 
            { return symbol(sym.ABSTRACT);
            }
          case 228: break;
          case 111: 
            { return symbol(sym.STRICTFP);
            }
          case 229: break;
          case 112: 
            { return symbol(sym.VOLATILE);
            }
          case 230: break;
          case 113: 
            { return symbol(sym.TRANSIENT);
            }
          case 231: break;
          case 114: 
            { return symbol(sym.INTERFACE);
            }
          case 232: break;
          case 115: 
            { return symbol(sym.PROTECTED);
            }
          case 233: break;
          case 116: 
            { return symbol(sym.INSTANCEOF);
            }
          case 234: break;
          case 117: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 235: break;
          case 118: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 236: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
