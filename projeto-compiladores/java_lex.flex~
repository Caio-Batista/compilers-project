/*-----------------------------Usercode Section-----------------------------*/

import java_cup.runtime.*;
%%

%class JavaScanner

%line
%column

%cup
//%cupdebug

%{
  StringBuilder string = new StringBuilder();  

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }
%}
/*
  Macro Declarations  
*/

/* main character classes */
LineTerminator = \r|\n|\r\n
InputCharacter = [^\r\n]

WhiteSpace = {LineTerminator} | [ \t\f]

/* comments */
Comment = {TraditionalComment} | {EndOfLineComment} | 
          {DocumentationComment}

TraditionalComment = "/*" [^*] ~"*/" | "/*" "*"+ "/"
EndOfLineComment = "//" {InputCharacter}* {LineTerminator}?
DocumentationComment = "/*" "*"+ [^/*] ~"*/"

/* identifiers */
Identifier = [:jletter:][:jletterdigit:]*

/* integer literals */
DecIntegerLiteral = 0 | [1-9][0-9]*
DecLongLiteral    = {DecIntegerLiteral} [lL]

HexIntegerLiteral = 0 [xX] 0* {HexDigit} {1,8}
HexLongLiteral    = 0 [xX] 0* {HexDigit} {1,16} [lL]
HexDigit          = [0-9a-fA-F]

OctIntegerLiteral = 0+ [1-3]? {OctDigit} {1,15}
OctLongLiteral    = 0+ 1? {OctDigit} {1,21} [lL]
OctDigit          = [0-7]
    
/* floating point literals */        
FloatLiteral  = ({FLit1}|{FLit2}|{FLit3}) {Exponent}?
DoubleLiteral = ({FLit1}|{FLit2}|{FLit3}) {Exponent}?

FLit1    = [0-9]+ \. [0-9]* 
FLit2    = \. [0-9]+ 
FLit3    = [0-9]+ 
Exponent = [eE] [+-]? [0-9]+

/* string and character literals */
StringCharacter = [^\r\n\"\\]
SingleCharacter = [^\r\n\'\\]

%state STRING, CHARLITERAL

%%
/*-------------------------Lexical Rules Section----------------------------*/

<YYINITIAL> {

  /* keywords   */
        
  "class"                        { return symbol(sym.CLASS); }
  "extends"                      { return symbol(sym.EXTENDS); }
  "implements"                   { return symbol(sym.IMPLEMENTS); }
  "package"                      { return symbol(sym.PACKAGE); }
  "import"                       { return symbol(sym.IMPORT); }
  "new"                          { return symbol(sym.NEW); }
  "interface"                    { return symbol(sym.INTERFACE); }
  "if"                           { return symbol(sym.IF); }
  "else"                         { return symbol(sym.ELSE); }
  "continue"                     { return symbol(sym.CONTINUE); }
  "break"                        { return symbol(sym.BREAK); }
  "return"                       { return symbol(sym.RETURN); }
  "throw"                        { return symbol(sym.THROW); }
  "do"                           { return symbol(sym.DO); }
  "while"                        { return symbol(sym.WHILE); }
  "for"                          { return symbol(sym.FOR); }
  "try"                          { return symbol(sym.TRY); }
  "catch"                        { return symbol(sym.CATCH); }
  "finally"                      { return symbol(sym.FINALLY); }
  "switch"                       { return symbol(sym.SWITCH); }
  "case"                         { return symbol(sym.CASE); }
  "default"                      { return symbol(sym.DEFAULT); }

  /* modifiers  */
  "abstract"                     { return symbol(sym.ABSTRACT); }
  "final"                        { return symbol(sym.FINAL); }
  "native"                       { return symbol(sym.NATIVE); }
  "synchronized"                 { return symbol(sym.SYNCHRONIZED); }
  "transient"                    { return symbol(sym.TRANSIENT); }
  "volatile"                     { return symbol(sym.VOLATILE); }
  "strictfp"                     { return symbol(sym.STRICTFP); }
  "public"                       { return symbol(sym.PUBLIC); }
  "protected"                    { return symbol(sym.PROTECTED); }
  "private"                      { return symbol(sym.PRIVATE); }
  "static"                       { return symbol(sym.STATIC); }
  "threadsafe"                   { return symbol(sym.THREADSAFE); }

  "super"                        { return symbol(sym.SUPER); }
  "this"                         { return symbol(sym.THIS); }
  "instanceof"                   { return symbol(sym.INSTANCEOF); }

  /*   types    */
  "boolean"                      { return symbol(sym.BOOLEAN); }
  "byte"                         { return symbol(sym.BYTE); }
  "char"                         { return symbol(sym.CHAR); }
  "short"                        { return symbol(sym.SHORT); }
  "int"                          { return symbol(sym.INT); }
  "float"                        { return symbol(sym.FLOAT); }
  "long"                         { return symbol(sym.LONG); }
  "double"                       { return symbol(sym.DOUBLE); }
 
  /* separators */
  "("                            { return symbol(sym.LPAREN); }
  ")"                            { return symbol(sym.RPAREN); }
  "{"                            { return symbol(sym.LBRACE); }
  "}"                            { return symbol(sym.RBRACE); }
  "["                            { return symbol(sym.LBRACK); }
  "]"                            { return symbol(sym.RBRACK); }
  ";"                            { return symbol(sym.SEMICOLON); }
  ","                            { return symbol(sym.COMMA); }
  "."                            { return symbol(sym.DOT); }

  /* operators  */
  "="                            { return symbol(sym.EQUAL); }
  ">"                            { return symbol(sym.GREATER); }
  "<"                            { return symbol(sym.LESS); }
  "!"                            { return symbol(sym.NOT); }
  "~"                            { return symbol(sym.BITNOT); }
  "?"                            { return symbol(sym.QUESTION); }
  ":"                            { return symbol(sym.COLON); }
  "=="                           { return symbol(sym.EQEQ); }
  "<="                           { return symbol(sym.LTEQ); }
  ">="                           { return symbol(sym.GTEQ); }
  "!="                           { return symbol(sym.NOTEQ); }
  "&&"                           { return symbol(sym.ANDAND); }
  "||"                           { return symbol(sym.OROR); }
  "++"                           { return symbol(sym.PLUSPLUS); }
  "--"                           { return symbol(sym.MINUSMINUS); }
  "+"                            { return symbol(sym.PLUS); }
  "-"                            { return symbol(sym.MINUS); }
  "*"                            { return symbol(sym.MULT); }
  "/"                            { return symbol(sym.DIV); }
  "&"                            { return symbol(sym.AND); }
  "|"                            { return symbol(sym.OR); }
  "^"                            { return symbol(sym.XOR); }
  "%"                            { return symbol(sym.MOD); }
  "<<"                           { return symbol(sym.LSHIFT); }
  ">>"                           { return symbol(sym.RSHIFT); }
  ">>>"                          { return symbol(sym.URSHIFT); }
  "+="                           { return symbol(sym.PLUSEQ); }
  "-="                           { return symbol(sym.MINUSEQ); }
  "*="                           { return symbol(sym.MULTEQ); }
  "/="                           { return symbol(sym.DIVEQ); }
  "&="                           { return symbol(sym.ANDEQ); }
  "|="                           { return symbol(sym.OREQ); }
  "^="                           { return symbol(sym.XOREQ); }
  "%="                           { return symbol(sym.MODEQ); }
  "<<="                          { return symbol(sym.LSHIFTEQ); }
  ">>="                          { return symbol(sym.RSHIFTEQ); }
  
  /* literals */ 
  
  /* string literal */
  
  \"                             { yybegin(STRING); string.setLength(0); }
  
  /* boolean literals */  
  "true"                         { return symbol(sym.BOOLEAN_LITERAL, true); }
  "false"                        { return symbol(sym.BOOLEAN_LITERAL, false); }
  
  /* null literal */
  "null"                         { return symbol(sym.NULL); }  
  
  /* Integer literals */
  {DecIntegerLiteral}            { return symbol(sym.INTEGER_LITERAL,
                        new Integer(yytext())); }

  {DecLongLiteral}               { return symbol(sym.INTEGER_LITERAL,
                        new Long(yytext().substring(0, yylength()-1))); }

  {HexIntegerLiteral}            { return symbol(sym.INTEGER_LITERAL,
                        new Integer((int) Long.parseLong(
                                   yytext().substring(2, yylength()), 16))); }

  {HexLongLiteral}               { return symbol(sym.INTEGER_LITERAL,
                        new Long( Long.parseLong(
                                   yytext().substring(2, yylength()-1), 16))); }

  {OctIntegerLiteral}            { return symbol(sym.INTEGER_LITERAL,
                        new Integer((int) Long.parseLong(
                                   yytext().substring(0, yylength()), 8))); }

  {OctLongLiteral}               { return symbol(sym.INTEGER_LITERAL,
                        new Long( Long.parseLong(
                                   yytext().substring(0, yylength()-1), 8))); }

  /* floating point literals */

  {FloatLiteral}                 { return symbol(sym.FLOATING_POINT_LITERAL,
                        new Float(yytext()));}

  {FloatLiteral}[fF]             { return symbol(sym.FLOATING_POINT_LITERAL,
                        new Float(yytext().substring(0, yylength()-1))); }  

  {DoubleLiteral}                { return symbol(sym.FLOATING_POINT_LITERAL,
                        new Double(yytext()));}

  {DoubleLiteral}[dD]            { return symbol(sym.FLOATING_POINT_LITERAL,
                        new Double(yytext().substring(0, yylength()-1))); }  

  /* other stuff */
  {Identifier}                   { return symbol(sym.IDENTIFIER); }
  
  {WhiteSpace}                   {/* ignores */}
  {Comment}                      {/* ignores */}
}

<STRING> {
  \"                             { yybegin(YYINITIAL);
                                   return symbol(sym.STRING_LITERAL, 
                                                 string.toString()); }
  
  {StringCharacter}+             { string.append( yytext() ); }
  
  /* escape sequences */
  "\\b"                          { string.append( '\b' ); }
  "\\t"                          { string.append( '\t' ); }
  "\\n"                          { string.append( '\n' ); }
  "\\f"                          { string.append( '\f' ); }
  "\\r"                          { string.append( '\r' ); }
  "\\\""                         { string.append( '\"' ); }
  "\\'"                          { string.append( '\'' ); }
  "\\\\"                         { string.append( '\\' ); }
  \\[0-3]?{OctDigit}?{OctDigit}  { char val = (char) Integer.parseInt(
                                                     yytext().substring(1),8);
                        	   string.append( val ); }
  
  /* error cases */
  \\.                            { throw new RuntimeException(
                                  "Illegal escape sequence \""+yytext()+"\""); }
  {LineTerminator}               { throw new RuntimeException(
                                       "Unterminated string at end of line"); }  
}

<CHARLITERAL> {
  {SingleCharacter}\'            { yybegin(YYINITIAL);
                                   return symbol(sym.CHARACTER_LITERAL,
                                                 yytext().charAt(0)); }
  
  /* escape sequences */
  "\\b"\'                        { yybegin(YYINITIAL);
                                   return symbol(sym.CHARACTER_LITERAL, '\b');}
  "\\t"\'                        { yybegin(YYINITIAL);
                                   return symbol(sym.CHARACTER_LITERAL, '\t');}
  "\\n"\'                        { yybegin(YYINITIAL);
                                   return symbol(sym.CHARACTER_LITERAL, '\n');}
  "\\f"\'                        { yybegin(YYINITIAL);
                                   return symbol(sym.CHARACTER_LITERAL, '\f');}
  "\\r"\'                        { yybegin(YYINITIAL);
                                   return symbol(sym.CHARACTER_LITERAL, '\r');}
  "\\\""\'                       { yybegin(YYINITIAL);
                                   return symbol(sym.CHARACTER_LITERAL, '\"');}
  "\\'"\'                        { yybegin(YYINITIAL);
                                   return symbol(sym.CHARACTER_LITERAL, '\'');}
  "\\\\"\'                       { yybegin(YYINITIAL);
                                   return symbol(sym.CHARACTER_LITERAL, '\\'); }
  \\[0-3]?{OctDigit}?{OctDigit}\' { yybegin(YYINITIAL); 
			            int val = Integer.parseInt(
                                          yytext().substring(1,yylength()-1),8);
			          return symbol(sym.CHARACTER_LITERAL, 
                                                            (char)val); }
  
  /* error cases */
  \\.                            { throw new RuntimeException(
                                  "Illegal escape sequence \""+yytext()+"\""); }
  {LineTerminator}               { throw new RuntimeException(
                             "Unterminated character literal at end of line"); }
}

/* error fallback */
[^]              { throw new RuntimeException("Illegal character \""+yytext()+
                             "\" at line "+yyline+", column "+yycolumn); }
