/* The following code was generated by JFlex 1.6.1 */

/* Analisador lexico para a disciplina de Compiladores 
2015.1 - Grupo : Caio Batista
                 Carlos Interaminense
                 Rafael Paulino
*/
                 


import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>java_lex.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\2\0\1\3\22\0\1\3\1\51\3\0\1\64\1\55"+
    "\1\0\1\35\1\36\1\61\1\57\1\44\1\60\1\45\1\62\12\2"+
    "\1\54\1\43\1\50\1\46\1\47\1\53\1\0\22\1\1\34\7\1"+
    "\1\41\1\0\1\42\1\63\1\1\1\0\1\6\1\23\1\4\1\14"+
    "\1\10\1\21\1\31\1\27\1\15\1\1\1\24\1\5\1\16\1\13"+
    "\1\25\1\17\1\1\1\20\1\7\1\12\1\26\1\32\1\22\1\11"+
    "\1\30\1\33\1\37\1\56\1\40\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\20\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\24\2\1\35"+
    "\2\2\1\36\16\2\1\0\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\22\2"+
    "\1\62\3\2\1\63\4\2\1\64\11\2\1\65\7\2"+
    "\1\0\1\66\1\67\1\70\1\2\1\71\3\2\1\72"+
    "\1\73\10\2\1\74\2\2\1\75\1\76\2\2\1\77"+
    "\21\2\1\100\1\2\1\101\1\2\1\3\1\102\1\103"+
    "\1\104\1\105\6\2\1\106\1\107\3\2\1\110\14\2"+
    "\1\111\1\112\1\113\1\114\1\115\4\2\1\116\1\2"+
    "\1\117\1\2\1\120\3\2\1\121\1\122\1\2\1\123"+
    "\3\2\1\124\3\2\1\125\1\126\3\2\1\127\4\2"+
    "\1\130\1\2\1\131\3\2\1\132\1\133\1\2\1\134"+
    "\1\135\1\2\1\136\1\137\1\140\6\2\1\141\1\2"+
    "\1\142\1\2\1\143\1\2\1\144\1\2\1\145\1\146"+
    "\1\2\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\65\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\65\0\65\0\65\0\u052d\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f"+
    "\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f"+
    "\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\152\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\65\0\65\0\u0eb3\0\65"+
    "\0\u0ee8\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\u0f1d"+
    "\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d"+
    "\0\u12a2\0\152\0\u12d7\0\u130c\0\u1341\0\152\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553"+
    "\0\u1588\0\u15bd\0\u15f2\0\u1627\0\152\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\65\0\u1804\0\65"+
    "\0\u1839\0\152\0\u186e\0\u18a3\0\u18d8\0\152\0\152\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\152"+
    "\0\u1ab5\0\u1aea\0\152\0\152\0\u1b1f\0\u1b54\0\152\0\u1b89"+
    "\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\152\0\u1f0e\0\152\0\u1f43\0\65\0\65\0\152\0\152"+
    "\0\152\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\152"+
    "\0\152\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4"+
    "\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c"+
    "\0\u23d1\0\152\0\152\0\u2406\0\152\0\152\0\u243b\0\u2470"+
    "\0\u24a5\0\u24da\0\152\0\u250f\0\152\0\u2544\0\152\0\u2579"+
    "\0\u25ae\0\u25e3\0\152\0\152\0\u2618\0\152\0\u264d\0\u2682"+
    "\0\u26b7\0\152\0\u26ec\0\u2721\0\u2756\0\152\0\152\0\u278b"+
    "\0\u27c0\0\u27f5\0\152\0\u282a\0\u285f\0\u2894\0\u28c9\0\152"+
    "\0\u28fe\0\152\0\u2933\0\u2968\0\u299d\0\152\0\152\0\u29d2"+
    "\0\152\0\152\0\u2a07\0\152\0\152\0\152\0\u2a3c\0\u2a71"+
    "\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\152\0\u2b7a\0\152\0\u2baf"+
    "\0\152\0\u2be4\0\152\0\u2c19\0\152\0\152\0\u2c4e\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\1\15\1\16\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\6\3\1\24\1\3\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\66\0\2\3\1\0\31\3\32\0\1\4\63\0\2\3"+
    "\1\0\1\3\1\56\1\57\16\3\1\60\1\3\1\61"+
    "\5\3\31\0\2\3\1\0\21\3\1\62\7\3\31\0"+
    "\2\3\1\0\3\3\1\63\13\3\1\64\11\3\31\0"+
    "\2\3\1\0\6\3\1\65\7\3\1\66\3\3\1\67"+
    "\1\70\1\71\4\3\31\0\2\3\1\0\1\3\1\72"+
    "\3\3\1\73\23\3\31\0\2\3\1\0\14\3\1\74"+
    "\6\3\1\75\5\3\31\0\2\3\1\0\2\3\1\76"+
    "\1\3\1\77\15\3\1\100\6\3\31\0\2\3\1\0"+
    "\4\3\1\101\14\3\1\102\7\3\31\0\2\3\1\0"+
    "\7\3\1\103\2\3\1\104\2\3\1\105\13\3\31\0"+
    "\2\3\1\0\2\3\1\106\11\3\1\107\5\3\1\110"+
    "\6\3\31\0\2\3\1\0\4\3\1\111\24\3\31\0"+
    "\2\3\1\0\1\3\1\112\1\113\6\3\1\114\7\3"+
    "\1\115\7\3\31\0\2\3\1\0\23\3\1\116\5\3"+
    "\31\0\2\3\1\0\14\3\1\117\4\3\1\120\2\3"+
    "\1\121\4\3\31\0\2\3\1\0\21\3\1\122\7\3"+
    "\31\0\2\3\1\0\6\3\1\123\22\3\110\0\1\124"+
    "\52\0\1\125\64\0\1\126\1\127\63\0\1\130\1\0"+
    "\1\131\62\0\1\132\64\0\1\133\6\0\1\134\55\0"+
    "\1\135\7\0\1\136\54\0\1\137\10\0\1\140\53\0"+
    "\1\141\11\0\1\142\52\0\1\143\13\0\1\144\50\0"+
    "\1\145\12\0\2\144\50\0\1\146\64\0\1\147\17\0"+
    "\2\3\1\0\2\3\1\150\26\3\31\0\2\3\1\0"+
    "\3\3\1\151\2\3\1\152\22\3\31\0\2\3\1\0"+
    "\7\3\1\153\21\3\31\0\2\3\1\0\2\3\1\154"+
    "\26\3\31\0\2\3\1\0\7\3\1\155\21\3\31\0"+
    "\2\3\1\0\3\3\1\156\25\3\31\0\2\3\1\0"+
    "\3\3\1\157\25\3\31\0\2\3\1\0\2\3\1\160"+
    "\11\3\1\161\14\3\31\0\2\3\1\0\11\3\1\162"+
    "\17\3\31\0\2\3\1\0\13\3\1\163\15\3\31\0"+
    "\2\3\1\0\21\3\1\164\7\3\31\0\2\3\1\0"+
    "\7\3\1\165\21\3\31\0\2\3\1\0\3\3\1\166"+
    "\25\3\31\0\2\3\1\0\6\3\1\167\22\3\31\0"+
    "\2\3\1\0\2\3\1\170\17\3\1\171\1\3\1\172"+
    "\4\3\31\0\2\3\1\0\11\3\1\173\2\3\1\174"+
    "\14\3\31\0\2\3\1\0\6\3\1\175\22\3\31\0"+
    "\2\3\1\0\16\3\1\176\12\3\31\0\2\3\1\0"+
    "\1\3\1\177\27\3\31\0\2\3\1\0\15\3\1\200"+
    "\13\3\31\0\2\3\1\0\22\3\1\201\6\3\31\0"+
    "\2\3\1\0\3\3\1\202\2\3\1\203\22\3\31\0"+
    "\2\3\1\0\13\3\1\204\15\3\31\0\2\3\1\0"+
    "\1\205\30\3\31\0\2\3\1\0\11\3\1\206\7\3"+
    "\1\207\7\3\31\0\2\3\1\0\17\3\1\210\11\3"+
    "\31\0\2\3\1\0\6\3\1\211\22\3\31\0\2\3"+
    "\1\0\21\3\1\212\7\3\31\0\2\3\1\0\1\3"+
    "\1\213\27\3\31\0\2\3\1\0\7\3\1\214\21\3"+
    "\31\0\2\3\1\0\14\3\1\215\14\3\31\0\2\3"+
    "\1\0\11\3\1\216\17\3\31\0\2\3\1\0\4\3"+
    "\1\217\24\3\31\0\2\3\1\0\21\3\1\220\7\3"+
    "\31\0\2\3\1\0\6\3\1\221\22\3\31\0\2\3"+
    "\1\0\1\3\1\222\7\3\1\223\17\3\31\0\2\3"+
    "\1\0\14\3\1\224\14\3\32\0\1\225\130\0\1\226"+
    "\1\227\63\0\1\230\17\0\2\3\1\0\3\3\1\231"+
    "\25\3\31\0\2\3\1\0\4\3\1\232\24\3\31\0"+
    "\2\3\1\0\1\233\30\3\31\0\2\3\1\0\3\3"+
    "\1\234\2\3\1\235\22\3\31\0\2\3\1\0\14\3"+
    "\1\236\14\3\31\0\2\3\1\0\25\3\1\237\3\3"+
    "\31\0\2\3\1\0\4\3\1\240\24\3\31\0\2\3"+
    "\1\0\6\3\1\241\22\3\31\0\2\3\1\0\6\3"+
    "\1\242\22\3\31\0\2\3\1\0\11\3\1\243\17\3"+
    "\31\0\2\3\1\0\6\3\1\244\22\3\31\0\2\3"+
    "\1\0\4\3\1\245\24\3\31\0\2\3\1\0\14\3"+
    "\1\246\14\3\31\0\2\3\1\0\1\247\30\3\31\0"+
    "\2\3\1\0\4\3\1\250\24\3\31\0\2\3\1\0"+
    "\4\3\1\251\24\3\31\0\2\3\1\0\7\3\1\252"+
    "\21\3\31\0\2\3\1\0\4\3\1\253\24\3\31\0"+
    "\2\3\1\0\3\3\1\254\25\3\31\0\2\3\1\0"+
    "\21\3\1\255\7\3\31\0\2\3\1\0\11\3\1\256"+
    "\17\3\31\0\2\3\1\0\1\3\1\257\27\3\31\0"+
    "\2\3\1\0\2\3\1\260\26\3\31\0\2\3\1\0"+
    "\17\3\1\261\11\3\31\0\2\3\1\0\6\3\1\262"+
    "\22\3\31\0\2\3\1\0\4\3\1\263\24\3\31\0"+
    "\2\3\1\0\1\3\1\264\17\3\1\265\7\3\31\0"+
    "\2\3\1\0\20\3\1\266\10\3\31\0\2\3\1\0"+
    "\26\3\1\267\2\3\31\0\2\3\1\0\6\3\1\270"+
    "\22\3\31\0\2\3\1\0\1\3\1\271\27\3\31\0"+
    "\2\3\1\0\22\3\1\272\6\3\31\0\2\3\1\0"+
    "\2\3\1\273\26\3\31\0\2\3\1\0\3\3\1\274"+
    "\25\3\31\0\2\3\1\0\2\3\1\275\26\3\31\0"+
    "\2\3\1\0\1\3\1\276\27\3\31\0\2\3\1\0"+
    "\2\3\1\277\26\3\31\0\2\3\1\0\1\3\1\300"+
    "\27\3\31\0\2\3\1\0\4\3\1\301\24\3\31\0"+
    "\2\3\1\0\2\3\1\302\26\3\31\0\2\3\1\0"+
    "\10\3\1\303\20\3\31\0\2\3\1\0\11\3\1\304"+
    "\17\3\32\0\1\225\33\0\1\305\74\0\1\306\17\0"+
    "\2\3\1\0\3\3\1\307\25\3\31\0\2\3\1\0"+
    "\23\3\1\310\5\3\31\0\2\3\1\0\6\3\1\311"+
    "\22\3\31\0\2\3\1\0\11\3\1\312\17\3\31\0"+
    "\2\3\1\0\14\3\1\313\14\3\31\0\2\3\1\0"+
    "\14\3\1\314\14\3\31\0\2\3\1\0\11\3\1\315"+
    "\17\3\31\0\2\3\1\0\1\316\30\3\31\0\2\3"+
    "\1\0\1\317\30\3\31\0\2\3\1\0\14\3\1\320"+
    "\14\3\31\0\2\3\1\0\6\3\1\321\22\3\31\0"+
    "\2\3\1\0\23\3\1\322\5\3\31\0\2\3\1\0"+
    "\7\3\1\323\21\3\31\0\2\3\1\0\3\3\1\324"+
    "\25\3\31\0\2\3\1\0\16\3\1\325\12\3\31\0"+
    "\2\3\1\0\26\3\1\326\2\3\31\0\2\3\1\0"+
    "\22\3\1\327\6\3\31\0\2\3\1\0\1\3\1\330"+
    "\27\3\31\0\2\3\1\0\2\3\1\331\26\3\31\0"+
    "\2\3\1\0\14\3\1\332\14\3\31\0\2\3\1\0"+
    "\4\3\1\333\24\3\31\0\2\3\1\0\14\3\1\334"+
    "\14\3\31\0\2\3\1\0\2\3\1\335\26\3\31\0"+
    "\2\3\1\0\2\3\1\336\26\3\31\0\2\3\1\0"+
    "\4\3\1\337\24\3\31\0\2\3\1\0\11\3\1\340"+
    "\17\3\31\0\2\3\1\0\14\3\1\341\14\3\31\0"+
    "\2\3\1\0\6\3\1\342\22\3\31\0\2\3\1\0"+
    "\4\3\1\343\24\3\31\0\2\3\1\0\1\3\1\344"+
    "\27\3\31\0\2\3\1\0\4\3\1\345\24\3\31\0"+
    "\2\3\1\0\20\3\1\346\10\3\31\0\2\3\1\0"+
    "\4\3\1\347\24\3\31\0\2\3\1\0\6\3\1\350"+
    "\22\3\31\0\2\3\1\0\7\3\1\351\21\3\31\0"+
    "\2\3\1\0\7\3\1\352\21\3\31\0\2\3\1\0"+
    "\6\3\1\353\22\3\31\0\2\3\1\0\2\3\1\354"+
    "\26\3\31\0\2\3\1\0\1\355\30\3\31\0\2\3"+
    "\1\0\6\3\1\356\22\3\31\0\2\3\1\0\23\3"+
    "\1\357\5\3\31\0\2\3\1\0\14\3\1\360\14\3"+
    "\31\0\2\3\1\0\10\3\1\361\20\3\31\0\2\3"+
    "\1\0\11\3\1\362\17\3\31\0\2\3\1\0\3\3"+
    "\1\363\25\3\31\0\2\3\1\0\4\3\1\364\24\3"+
    "\31\0\2\3\1\0\1\3\1\365\27\3\31\0\2\3"+
    "\1\0\4\3\1\366\24\3\31\0\2\3\1\0\7\3"+
    "\1\367\21\3\31\0\2\3\1\0\15\3\1\370\13\3"+
    "\31\0\2\3\1\0\12\3\1\371\16\3\31\0\2\3"+
    "\1\0\6\3\1\372\22\3\31\0\2\3\1\0\25\3"+
    "\1\373\3\3\31\0\2\3\1\0\6\3\1\374\22\3"+
    "\31\0\2\3\1\0\1\375\30\3\31\0\2\3\1\0"+
    "\1\376\30\3\31\0\2\3\1\0\7\3\1\377\21\3"+
    "\31\0\2\3\1\0\1\3\1\u0100\27\3\31\0\2\3"+
    "\1\0\2\3\1\u0101\26\3\31\0\2\3\1\0\11\3"+
    "\1\u0102\17\3\31\0\2\3\1\0\25\3\1\u0103\3\3"+
    "\31\0\2\3\1\0\22\3\1\u0104\6\3\31\0\2\3"+
    "\1\0\1\u0105\30\3\31\0\2\3\1\0\15\3\1\u0106"+
    "\13\3\31\0\2\3\1\0\21\3\1\u0107\7\3\31\0"+
    "\2\3\1\0\3\3\1\u0108\25\3\31\0\2\3\1\0"+
    "\4\3\1\u0109\24\3\31\0\2\3\1\0\6\3\1\u010a"+
    "\22\3\31\0\2\3\1\0\1\u010b\30\3\31\0\2\3"+
    "\1\0\2\3\1\u010c\26\3\31\0\2\3\1\0\4\3"+
    "\1\u010d\24\3\31\0\2\3\1\0\4\3\1\u010e\24\3"+
    "\31\0\2\3\1\0\4\3\1\u010f\24\3\31\0\2\3"+
    "\1\0\6\3\1\u0110\22\3\31\0\2\3\1\0\24\3"+
    "\1\u0111\4\3\31\0\2\3\1\0\7\3\1\u0112\21\3"+
    "\31\0\2\3\1\0\1\3\1\u0113\27\3\31\0\2\3"+
    "\1\0\4\3\1\u0114\24\3\31\0\2\3\1\0\6\3"+
    "\1\u0115\22\3\31\0\2\3\1\0\13\3\1\u0116\15\3"+
    "\31\0\2\3\1\0\7\3\1\u0117\21\3\31\0\2\3"+
    "\1\0\7\3\1\u0118\21\3\31\0\2\3\1\0\4\3"+
    "\1\u0119\24\3\31\0\2\3\1\0\1\u011a\30\3\31\0"+
    "\2\3\1\0\7\3\1\u011b\21\3\31\0\2\3\1\0"+
    "\4\3\1\u011c\24\3\31\0\2\3\1\0\4\3\1\u011d"+
    "\24\3\31\0\2\3\1\0\11\3\1\u011e\17\3\31\0"+
    "\2\3\1\0\6\3\1\u011f\22\3\31\0\2\3\1\0"+
    "\21\3\1\u0120\7\3\31\0\2\3\1\0\4\3\1\u0121"+
    "\24\3\31\0\2\3\1\0\6\3\1\u0122\22\3\31\0"+
    "\2\3\1\0\10\3\1\u0123\20\3\31\0\2\3\1\0"+
    "\27\3\1\u0124\1\3\31\0\2\3\1\0\15\3\1\u0125"+
    "\13\3\31\0\2\3\1\0\3\3\1\u0126\25\3\31\0"+
    "\2\3\1\0\4\3\1\u0127\24\3\31\0\2\3\1\0"+
    "\10\3\1\u0128\20\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11395];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\21\1\10\11\4\1\3\11"+
    "\56\1\1\0\2\11\1\1\1\11\1\1\16\11\55\1"+
    "\1\0\1\11\1\1\1\11\54\1\2\11\142\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                             "\" at line "+yyline+", column "+yycolumn);
            }
          case 104: break;
          case 2: 
            { return symbol(sym.ID);
            }
          case 105: break;
          case 3: 
            { return symbol(sym.NUMERO);
            }
          case 106: break;
          case 4: 
            { /*Ignore*/
            }
          case 107: break;
          case 5: 
            { return symbol(sym.LPAREN);
            }
          case 108: break;
          case 6: 
            { return symbol(sym.RPAREN);
            }
          case 109: break;
          case 7: 
            { return symbol(sym.LBRACE);
            }
          case 110: break;
          case 8: 
            { return symbol(sym.RBRACE);
            }
          case 111: break;
          case 9: 
            { return symbol(sym.LBRACK);
            }
          case 112: break;
          case 10: 
            { return symbol(sym.RBRACK);
            }
          case 113: break;
          case 11: 
            { return symbol(sym.SEMICOLON);
            }
          case 114: break;
          case 12: 
            { return symbol(sym.COMMA);
            }
          case 115: break;
          case 13: 
            { return symbol(sym.DOT);
            }
          case 116: break;
          case 14: 
            { return symbol(sym.EQUAL);
            }
          case 117: break;
          case 15: 
            { return symbol(sym.GREATER);
            }
          case 118: break;
          case 16: 
            { return symbol(sym.LESS);
            }
          case 119: break;
          case 17: 
            { return symbol(sym.NOT);
            }
          case 120: break;
          case 18: 
            { return symbol(sym.BITNOT);
            }
          case 121: break;
          case 19: 
            { return symbol(sym.QUESTION);
            }
          case 122: break;
          case 20: 
            { return symbol(sym.COLON);
            }
          case 123: break;
          case 21: 
            { return symbol(sym.AND);
            }
          case 124: break;
          case 22: 
            { return symbol(sym.OR);
            }
          case 125: break;
          case 23: 
            { return symbol(sym.PLUS);
            }
          case 126: break;
          case 24: 
            { return symbol(sym.MINUS);
            }
          case 127: break;
          case 25: 
            { return symbol(sym.MULT);
            }
          case 128: break;
          case 26: 
            { return symbol(sym.DIV);
            }
          case 129: break;
          case 27: 
            { return symbol(sym.XOR);
            }
          case 130: break;
          case 28: 
            { return symbol(sym.MOD);
            }
          case 131: break;
          case 29: 
            { return symbol(sym.DO);
            }
          case 132: break;
          case 30: 
            { return symbol(sym.IF);
            }
          case 133: break;
          case 31: 
            { return symbol(sym.EQEQ);
            }
          case 134: break;
          case 32: 
            { return symbol(sym.GTEQ);
            }
          case 135: break;
          case 33: 
            { return symbol(sym.RSHIFT);
            }
          case 136: break;
          case 34: 
            { return symbol(sym.LTEQ);
            }
          case 137: break;
          case 35: 
            { return symbol(sym.LSHIFT);
            }
          case 138: break;
          case 36: 
            { return symbol(sym.NOTEQ);
            }
          case 139: break;
          case 37: 
            { return symbol(sym.ANDEQ);
            }
          case 140: break;
          case 38: 
            { return symbol(sym.ANDAND);
            }
          case 141: break;
          case 39: 
            { return symbol(sym.OREQ);
            }
          case 142: break;
          case 40: 
            { return symbol(sym.OROR);
            }
          case 143: break;
          case 41: 
            { return symbol(sym.PLUSEQ);
            }
          case 144: break;
          case 42: 
            { return symbol(sym.PLUSPLUS);
            }
          case 145: break;
          case 43: 
            { return symbol(sym.MINUSEQ);
            }
          case 146: break;
          case 44: 
            { return symbol(sym.MINUSMINUS);
            }
          case 147: break;
          case 45: 
            { return symbol(sym.MULTEQ);
            }
          case 148: break;
          case 46: 
            { return symbol(sym.COMENTARIO);
            }
          case 149: break;
          case 47: 
            { return symbol(sym.DIVEQ);
            }
          case 150: break;
          case 48: 
            { return symbol(sym.XOREQ);
            }
          case 151: break;
          case 49: 
            { return symbol(sym.MODEQ);
            }
          case 152: break;
          case 50: 
            { return symbol(sym.TRY);
            }
          case 153: break;
          case 51: 
            { return symbol(sym.NEW);
            }
          case 154: break;
          case 52: 
            { return symbol(sym.INT);
            }
          case 155: break;
          case 53: 
            { return symbol(sym.FOR);
            }
          case 156: break;
          case 54: 
            { return symbol(sym.RSHIFTEQ);
            }
          case 157: break;
          case 55: 
            { return symbol(sym.URSHIFT);
            }
          case 158: break;
          case 56: 
            { return symbol(sym.LSHIFTEQ);
            }
          case 159: break;
          case 57: 
            { return symbol(sym.CASE);
            }
          case 160: break;
          case 58: 
            { return symbol(sym.CHAR);
            }
          case 161: break;
          case 59: 
            { return symbol(sym.LONG);
            }
          case 162: break;
          case 60: 
            { return symbol(sym.ELSE);
            }
          case 163: break;
          case 61: 
            { return symbol(sym.TRUE);
            }
          case 164: break;
          case 62: 
            { return symbol(sym.THIS);
            }
          case 165: break;
          case 63: 
            { return symbol(sym.NULL);
            }
          case 166: break;
          case 64: 
            { return symbol(sym.BYTE);
            }
          case 167: break;
          case 65: 
            { return symbol(sym.VOID);
            }
          case 168: break;
          case 66: 
            { return symbol(sym.URSHIFTEQ);
            }
          case 169: break;
          case 67: 
            { return symbol(sym.CLASS);
            }
          case 170: break;
          case 68: 
            { return symbol(sym.CATCH);
            }
          case 171: break;
          case 69: 
            { return symbol(sym.CONST);
            }
          case 172: break;
          case 70: 
            { return symbol(sym.SUPER);
            }
          case 173: break;
          case 71: 
            { return symbol(sym.SHORT);
            }
          case 174: break;
          case 72: 
            { return symbol(sym.THROW);
            }
          case 175: break;
          case 73: 
            { return symbol(sym.FLOAT);
            }
          case 176: break;
          case 74: 
            { return symbol(sym.FALSE);
            }
          case 177: break;
          case 75: 
            { return symbol(sym.FINAL);
            }
          case 178: break;
          case 76: 
            { return symbol(sym.WHILE);
            }
          case 179: break;
          case 77: 
            { return symbol(sym.BREAK);
            }
          case 180: break;
          case 78: 
            { return symbol(sym.ASSERT);
            }
          case 181: break;
          case 79: 
            { return symbol(sym.STATIC);
            }
          case 182: break;
          case 80: 
            { return symbol(sym.SWITCH);
            }
          case 183: break;
          case 81: 
            { return symbol(sym.THROWS);
            }
          case 184: break;
          case 82: 
            { return symbol(sym.NATIVE);
            }
          case 185: break;
          case 83: 
            { return symbol(sym.DOUBLE);
            }
          case 186: break;
          case 84: 
            { return symbol(sym.IMPORT);
            }
          case 187: break;
          case 85: 
            { return symbol(sym.PUBLIC);
            }
          case 188: break;
          case 86: 
            { return symbol(sym.RETURN);
            }
          case 189: break;
          case 87: 
            { return symbol(sym.STRING);
            }
          case 190: break;
          case 88: 
            { return symbol(sym.EXTENDS);
            }
          case 191: break;
          case 89: 
            { return symbol(sym.DEFAULT);
            }
          case 192: break;
          case 90: 
            { return symbol(sym.PACKAGE);
            }
          case 193: break;
          case 91: 
            { return symbol(sym.PRIVATE);
            }
          case 194: break;
          case 92: 
            { return symbol(sym.FINALLY);
            }
          case 195: break;
          case 93: 
            { return symbol(sym.BOOLEAN);
            }
          case 196: break;
          case 94: 
            { return symbol(sym.CONTINUE);
            }
          case 197: break;
          case 95: 
            { return symbol(sym.ABSTRACT);
            }
          case 198: break;
          case 96: 
            { return symbol(sym.STRICTFP);
            }
          case 199: break;
          case 97: 
            { return symbol(sym.VOLATILE);
            }
          case 200: break;
          case 98: 
            { return symbol(sym.TRANSIENT);
            }
          case 201: break;
          case 99: 
            { return symbol(sym.INTERFACE);
            }
          case 202: break;
          case 100: 
            { return symbol(sym.PROTECTED);
            }
          case 203: break;
          case 101: 
            { return symbol(sym.INSTANCEOF);
            }
          case 204: break;
          case 102: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 205: break;
          case 103: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
