import java_cup.runtime.*;

parser code {:

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left));
                if (s.right >= 0)
                    m.append(", column "+(s.right));
            }
        }

        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

// terminais
terminal CLASS, EXTENDS, IMPLEMENTS, INTERFACE, NEW, BREAK, CASE;
terminal CONTINUE, DEFAULT, DO, IF, ELSE, FOR, RETURN, SWITCH;
terminal WHILE, ASSERT, TRY, CATCH, FINALLY, THROW, THROWS, IMPORT;
terminal PACKAGE, BYTE, CONST, ABSTRACT, FINAL, NATIVE, SYNCHRONIZED;
terminal TRANSIENT, VOLATILE, STRICTFP, PUBLIC, PROTECTED, PRIVATE;
terminal STATIC, VOID, NULL, SUPER, THIS, INSTANCEOF, BOOLEAN, BYTE;
terminal CHAR, SHORT, INT, FLOAT, LONG, DOUBLE, STRING, TRUE, FALSE;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON;
terminal COMMA, DOT, EQUAL, GREATER, LESS, NOT, BITNOT, QUESTION;
terminal COLON, EQEQ, LTEQ, GTEQ, NOTEQ, ANDAND, OROR, PLUSPLUS;
terminal MINUSMINUS, PLUS, MINUS, MULT, DIV, AND, OR, XOR, MOD;
terminal LSHIFT, RSHIFT, URSHIFT, PLUSEQ, MINUSEQ, MULTEQ, DIVEQ;
terminal ANDEQ, OREQ, XOREQ, MODEQ, LSHIFTEQ, RSHIFTEQ;

// nao terminais

non terminal compilation_unit, package_declaration;
non terminal import_declarations, import_declaration;
non terminal single_type_import_declaration, type_import_on_demand_declaration;
non terminal type_declarations, type_declaration, class_declaration;
non terminal class_modifiers, class_modifier, super, interfaces;
non terminal interface_type_list, class_body, class_body_declarations;
non terminal class_body_declaration, class_member_declaration;
non terminal static_initializer, constructor_declaration;
non terminal constructor_modifiers, constructor_modifier;
non terminal constructor_declarator, formal_parameter_list;
non terminal formal_parameter, throws, class_type_list;
non terminal constructor_body, explicit_constructor_invocation;
non terminal field_declaration, field_modifiers, field_modifier;
non terminal variable_declarators, variable_declarator;
non terminal variable_declarator_id, variable_initializer;
non terminal method_declaration, method_header, result_type;
non terminal method_modifiers, method_modifier, method_declarator;
non terminal method_body, interface_declaration, interface_modifiers;
non terminal interface_modifier, extends_interfaces, interface_body;
non terminal interface_member_declarations, interface_member_declaration;
non terminal constant_declaration, constant_modifiers;
non terminal abstract_method_declaration, abstract_method_modifiers;
non terminal abstract_method_modifier, array_initializer;
non terminal variable_initializers, variable_initializer;
non terminal type, primitive_type, numeric_type, integral_type;
non terminal floating-point_type, reference_type, class_or_interface_type;
non terminal class_type, interface_type, array_type, block, block_statements;
non terminal block_statement, local_variable_declaration_statement;
non terminal local_variable_declaration, statement, statement_no_short_if;
non terminal statement_without_trailing_substatement;
non terminal empty_statement, labeled_statement, labeled_statement_no_short_if;
non terminal expression_statement, statement_expression;
non terminal if_then_statement, if_then_else_statement;
non terminal if_then_else_statement_no_short_if;
non terminal switch_statement, switch_block, switch_block_statement_groups;
non terminal switch_block_statement_group, switch_labels, switch_label;
non terminal while_statement, while_statement_no_short_if;
non terminal do_statement, for_statement, for_statement_no_short_if;
non terminal for_init, for_update, statement_expression_list;
non terminal break_statement, continue_statement, return_statement;
non terminal throws_statement, synchronized_statement;
non terminal try_statement, catches, catch_clause, finally;
non terminal constant_expression, expression, assignment_expression;
non terminal assignment, left_hand_side, assignment_operator;
non terminal conditional_expression, conditional_or_expression;
non terminal conditional_and_expression, inclusive_or_expression;
non terminal exclusive_or_expression, and_expression;
non terminal equality_expression, relational_expression;
non terminal shift_expression, additive_expression;
non terminal multiplicative_expression, cast_expression;
non terminal unary_expression, predecrement_expression;
non terminal preincrement_expression, unary_expression_not_plus_minus;
non terminal postdecrement_expression, postincrement_expression;
non terminal postfix_expression, method_invocation, field_access;
non terminal primary, primary_no_new_array, class_instance_creation_expression;
non terminal argument_list, array_creation_expression;
non terminal dim_exprs, dim_expr, dims, array_access, package_name;
non terminal type_name, simple_type_name, expression_name;
non terminal method_name, ambiguous_name, literal, integer_literal;
non terminal decimal_integer_literal, hex_integer_literal;
non terminal octal_integer_literal, integer_type_suffix;
non terminal decimal_numeral, digits, digit, non_zero_digit;
non terminal hex_numeral, hex_digit, octal_numeral, octal_digit;
non terminal floating-point_literal, digits, exponent_part;
non terminal exponent_indicator, signed_integer, sign, float_type_suffix;
non terminal boolean_literal, character_literal, single_character;
non terminal string_literal, string_characters, string_character;
non terminal null_literal, keyword, package_dec, import_dec, type_dec;
non terminal class_modifiers_e, super_e, interfaces_e, class_bode_declarations_e;
non terminal constructor_modifiers_e, throws_e;






compilation_unit ::= package_dec_e import_dec_e type_dec_e  // adicionar esses

package_dec ::= package_declaration
              |

import_dec  ::= import_declarations
              |

type_dec    ::= type declarations
              | 
              

package_declaration ::= PACKAGE package_name ;

import_declarations ::= import_declaration  
                      | import_declarations import_declaration

import_declaration ::= single_type_import_declaration | type_import_on_demand_declaration

single_type_import_declaration ::= import_type_name ;

type_import_on_demand_declaration ::= import_package_name DOT MULT ;

type_declarations ::= type_declaration | type_declarations_type_declaration

type_declaration ::= class_declaration | interface_declaration | ;   


class_declaration ::= class_modifiers_e CLASS ID super_e interfaces_e class_body

class_modifiers_e ::= class_modifiers
                    |

super_e ::= super
          | 

interfaces_e ::= interfaces
               |           
          
class_modifiers ::= class_modifier 
                  | class_modifiers class_modifier

class_modifier ::= PUBLIC  
                 | ABSTRACT 
                 | FINAL

super ::= EXTENDS class_type

interfaces ::= IMPLEMENTS interface_type_list

interface_type_list ::= interface_type | interface_type_list COMMA interface_type

class_body ::= LBRACE class_body_declarations_e RBRACE

class_bode_declarations_e ::= class_body_declarations
                            |

class_body_declarations ::= class_body_declaration
                          | class_body_declarations class_body_declaration

class_body_declaration ::= class_member_declaration
                         | static_initializer
                         | constructor_declaration

class_member_declaration ::= field_declaration
                           | method_declaration

static_initializer ::= STATIC block

constructor_declaration ::= constructor_modifiers_e constructor_declarator throws_e constructor_body

constructor_modifiers_e ::= constructor_modifiers
                          |

throws_e ::= throws
           |


constructor_modifiers ::= constructor_modifier
                        | constructor_modifiers constructor modifier

constructor_modifier ::= PUBLIC | PROTECTED | PRIVATE           
              
              
























