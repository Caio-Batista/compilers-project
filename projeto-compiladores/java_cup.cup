import java_cup.runtime.*;

parser code {:

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left  == 0) {
                m.append(" in line "+(s.left));
                if (s.right  == 0)
                    m.append(", column "+(s.right));
            }
        }

        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

// terminais
terminal CLASS, EXTENDS, IMPLEMENTS, INTERFACE, NEW, BREAK, CASE;
terminal CONTINUE, DEFAULT, DO, IF, ELSE, FOR, RETURN, SWITCH;
terminal WHILE, ASSERT, TRY, CATCH, FINALLY, THROW, THROWS, IMPORT;
terminal PACKAGE, BYTE, CONST, ABSTRACT, FINAL, NATIVE, SYNCHRONIZED;
terminal TRANSIENT, VOLATILE,SUPER, STRICTFP, PUBLIC, PROTECTED, PRIVATE;
terminal STATIC, VOID, NULL, THIS, INSTANCEOF, BOOLEAN, URSHIFTEQ;
terminal CHAR, SHORT, INT, FLOAT, LONG, DOUBLE, STRING, TRUE, FALSE;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON;
terminal COMMA, DOT, EQUAL, GREATER, LESS, NOT, BITNOT, QUESTION;
terminal COLON, EQEQ, LTEQ, GTEQ, NOTEQ, ANDAND, OROR, PLUSPLUS;
terminal MINUSMINUS, PLUS, MINUS, MULT, DIV, AND, OR, XOR, MOD;
terminal LSHIFT, RSHIFT, URSHIFT, PLUSEQ, MINUSEQ, MULTEQ, DIVEQ;
terminal ANDEQ, OREQ, XOREQ, MODEQ, LSHIFTEQ, RSHIFTEQ, ID, NUMERO, COMENTARIO, l, L, f , F , d , D;

// nao terminais

non terminal compilation_unit, package_declaration;
non terminal import_declarations, import_declaration;
non terminal single_type_import_declaration, type_import_on_demand_declaration;
non terminal type_declarations, type_declaration, class_declaration;
non terminal class_modifiers, class_modifier, super_prefix, interfaces;
non terminal interface_type_list, class_body, class_body_declarations;
non terminal class_body_declaration, class_member_declaration;
non terminal static_initializer, constructor_declaration;
non terminal constructor_modifiers, constructor_modifier;
non terminal constructor_declarator, formal_parameter_list;
non terminal formal_parameter, throws, class_type_list;
non terminal constructor_body, explicit_constructor_invocation;
non terminal field_declaration, field_modifiers, field_modifier;
non terminal variable_declarators, variable_declarator;
non terminal variable_declarator_id, variable_initializer;
non terminal method_declaration, method_header, result_type;
non terminal method_modifiers, method_modifier, method_declarator;
non terminal method_body, interface_declaration, interface_modifiers;
non terminal interface_modifier, extends_interfaces, interface_body;
non terminal interface_member_declarations, interface_member_declaration;
non terminal constant_declaration, constant_modifiers;
non terminal abstract_method_declaration, abstract_method_modifiers;
non terminal abstract_method_modifier, array_initializer;
non terminal variable_initializers;
non terminal type, primitive_type, numeric_type, integral_type;
non terminal floating_point_type, reference_type, class_or_interface_type;
non terminal class_type, interface_type, array_type, block, block_statements;
non terminal block_statement, local_variable_declaration_statement;
non terminal local_variable_declaration, statement, statement_no_short_if;
non terminal statement_without_trailing_substatement;
non terminal empty_statement, labeled_statement, labeled_statement_no_short_if;
non terminal expression_statement, statement_expression;
non terminal if_then_statement, if_then_else_statement;
non terminal if_then_else_statement_no_short_if;
non terminal switch_statement, switch_block, switch_block_statement_groups;
non terminal switch_block_statement_group, switch_labels, switch_label;
non terminal while_statement, while_statement_no_short_if;
non terminal do_statement, for_statement, for_statement_no_short_if;
non terminal for_init, for_update, statement_expression_list;
non terminal break_statement, continue_statement, return_statement;
non terminal throws_statement, synchronized_statement;
non terminal try_statement, catches, catch_clause, finally;
non terminal constant_expression, expression, assignment_expression;
non terminal assignment, left_hand_side, assignment_operator;
non terminal conditional_expression, conditional_or_expression;
non terminal conditional_and_expression, inclusive_or_expression;
non terminal exclusive_or_expression, and_expression;
non terminal equality_expression, relational_expression;
non terminal shift_expression, additive_expression;
non terminal multiplicative_expression, cast_expression;
non terminal unary_expression, predecrement_expression;
non terminal preincrement_expression, unary_expression_not_plus_minus;
non terminal postdecrement_expression, postincrement_expression;
non terminal postfix_expression, method_invocation, field_access;
non terminal primary, primary_no_new_array, class_instance_creation_expression;
non terminal argument_list, array_creation_expression;
non terminal dim_exprs, dim_expr, dims, array_access, package_name;
non terminal type_name, simple_type_name, expression_name;
non terminal method_name, ambiguous_name, literal, integer_literal;
non terminal decimal_integer_literal, hex_integer_literal;
non terminal octal_integer_literal, integer_type_suffix;
non terminal decimal_numeral, digits, digit, non_zero_digit;
non terminal hex_numeral, hex_digit, octal_numeral, octal_digit;
non terminal floating_point_literal, exponent_part;
non terminal exponent_indicator, signed_integer, sign, float_type_suffix;
non terminal boolean_literal, character_literal, single_character;
non terminal string_literal, string_characters, string_character;
non terminal null_literal, keyword, package_dec, import_dec, type_dec;
non terminal class_modifiers_e, super_e, interfaces_e, class_bode_declarations_e;
non terminal constructor_modifiers_e, throws_e, formal_parameter_list_e;
non terminal block_statements_e,argument_list_e, field_modifiers_e;
non terminal method_modifiers_e,extends_interfaces_e, interface_modifiers_e;
non terminal interface_member_declarations_e, abstract_method_modifiers_e;
non terminal variable_initializers_e, comma_e, import_type_name, import_package_name;
non terminal class_body_declarations_e, explicit_constructor_invocation_e, catches_optional;
non terminal expression_optional, identifier_optional, throws_statements;




compilation_unit ::= package_dec import_dec type_dec;  // adicionar esses

package_dec ::= package_declaration
              |;

import_dec  ::= import_declarations
              |;

type_dec    ::= type_declarations
              | ;
              

package_declaration ::= PACKAGE package_name SEMICOLON;

import_declarations ::= import_declaration  
                      | import_declarations import_declaration;

import_declaration ::= single_type_import_declaration | type_import_on_demand_declaration;

single_type_import_declaration ::= import_type_name ;

type_import_on_demand_declaration ::= import_package_name DOT MULT SEMICOLON;

type_declarations ::= type_declaration | type_declarations type_declaration;

type_declaration ::= class_declaration | interface_declaration | SEMICOLON;   


class_declaration ::= class_modifiers_e CLASS ID super_e interfaces_e class_body;

class_modifiers_e ::= class_modifiers
                    |;
super_e ::= super_prefix
          | ;

interfaces_e ::= interfaces
               |;           
          
class_modifiers ::= class_modifier 
                  | class_modifiers class_modifier;

class_modifier ::= PUBLIC  
                 | ABSTRACT 
                 | FINAL;

super_prefix ::= EXTENDS class_type;

interfaces ::= IMPLEMENTS interface_type_list;

interface_type_list ::= interface_type | interface_type_list COMMA interface_type;

class_body ::= LBRACE class_body_declarations_e RBRACE;

class_bode_declarations_e ::= class_body_declarations
                            |;

class_body_declarations ::= class_body_declaration
                          | class_body_declarations class_body_declaration;

class_body_declaration ::= class_member_declaration
                         | static_initializer
                         | constructor_declaration;

class_member_declaration ::= field_declaration
                           | method_declaration;

static_initializer ::= STATIC block;

constructor_declaration ::= constructor_modifiers_e constructor_declarator throws_e constructor_body;

constructor_modifiers_e ::= constructor_modifiers
                          |;

throws_e ::= throws
           |;


constructor_modifiers ::= constructor_modifier
                        | constructor_modifiers constructor_modifier;

constructor_modifier ::= PUBLIC | PROTECTED | PRIVATE;           
              
              






constructor_declarator ::= simple_type_name LPAREN formal_parameter_list_e RPAREN;

formal_parameter_list_e ::= formal_parameter_list
                          | SEMICOLON;



formal_parameter_list ::=  formal_parameter  |  formal_parameter_list  COMMA formal_parameter; 

 formal_parameter  ::=  type   variable_declarator_id ;

 throws  ::= THROWS  class_type_list ;

 class_type_list  ::=  class_type  |  class_type_list  COMMA  class_type ;

 constructor_body  ::= LBRACE  explicit_constructor_invocation_e   block_statements_e  RBRACE;
 
 explicit_constructor_invocation_e ::= explicit_constructor_invocation
                                     | ;
                                     
block_statements_e ::= block_statements
                     |;
                     
                                                          

 explicit_constructor_invocation ::= THIS LPAREN  argument_list_e  RPAREN | SUPER LPAREN  argument_list_e  RPAREN;
 
 argument_list_e ::= argument_list
                   |;


 field_declaration  ::=  field_modifiers_e   type   variable_declarators  SEMICOLON;
 
 field_modifiers_e ::= field_modifiers
                     | ;

 field_modifiers  ::=  field_modifier  |  field_modifiers   field_modifier; 

 field_modifier  ::= PUBLIC | PROTECTED | PRIVATE | STATIC | FINAL | TRANSIENT | VOLATILE;

 variable_declarators  ::=  variable_declarator  |  variable_declarators  COMMA variable_declarator; 

 variable_declarator  ::=  variable_declarator_id  |  variable_declarator_id  EQUAL  variable_initializer; 

 variable_declarator_id  ::=  ID  |  variable_declarator_id  LBRACK RBRACK;

 variable_initializer  ::=  expression  |  array_initializer ;

 method_declaration  ::=  method_header   method_body ;

 method_header  ::=  method_modifiers_e   result_type   method_declarator   throws_e;
 
 method_modifiers_e ::= method_modifiers
                      |;

 result_type  ::=  type  | VOID;

 method_modifiers  ::=  method_modifier  |  method_modifiers   method_modifier ;

 method_modifier  ::= PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | FINAL | SYNCHRONIZED | NATIVE;

 method_declarator  ::=  ID  LPAREN  formal_parameter_list_e  RPAREN;

 method_body  ::=  block  | SEMICOLON;

 interface_declaration  ::=  interface_modifiers_e  INTERFACE ID  extends_interfaces_e   interface_body ;

 extends_interfaces_e ::= extends_interfaces
                        | ;
 
 interface_modifiers_e ::= interface_modifiers
                         | ;                      

 interface_modifiers  ::=  interface_modifier  |  interface_modifiers   interface_modifier; 

 interface_modifier  ::= PUBLIC | ABSTRACT;

 extends_interfaces  ::= EXTENDS  interface_type  |  extends_interfaces  COMMA  interface_type ;

 interface_body  ::= LBRACE  interface_member_declarations_e  RBRACE;
 
 interface_member_declarations_e ::= interface_member_declarations
                                   |;

 interface_member_declarations  ::=  interface_member_declaration  |  interface_member_declarations   interface_member_declaration ;

 interface_member_declaration  ::=  constant_declaration  |  abstract_method_declaration ;

 constant_declaration  ::=  constant_modifiers   type   variable_declarator ;

 constant_modifiers  ::= PUBLIC | STATIC | FINAL;

 abstract_method_declaration ::=  abstract_method_modifiers_e   result_type   method_declarator   throws_e SEMICOLON;

 abstract_method_modifiers_e ::= abstract_method_modifiers
                               | ;

 abstract_method_modifiers  ::=  abstract_method_modifier  |  abstract_method_modifiers   abstract_method_modifier ;

 abstract_method_modifier  ::= PUBLIC | ABSTRACT;

 array_initializer  ::= LBRACE  variable_initializers_e  comma_e  RBRACE;
 
 variable_initializers_e ::= variable_initializers
                           |;
                           
 comma_e ::= COMMA
           |;                          

 variable_initializers  ::=  variable_initializer  |  variable_initializers  COMMA  variable_initializer ;

 variable_initializer  ::=  expression  |  array_initializer ;




type ::= primitive_type | reference_type;
primitive_type ::= numeric_type | BOOLEAN;

numeric_type ::= integral_type | floating_point_type;

integral_type ::= BYTE | SHORT | INT | LONG | CHAR;

floating_point_type ::= FLOAT | DOUBLE;

reference_type ::= class_or_interface_type | array_type;

class_or_interface_type ::= class_type | interface_type;

class_type ::= type_name;

interface_type ::= type_name;

array_type ::= type LBRACK RBRACK;





block ::= LBRACE block_statements RBRACE;

block_statements ::= block_statement | block_statements block_statement |;

block_statement ::= local_variable_declaration_statement | statement;

local_variable_declaration_statement ::= local_variable_declaration SEMICOLON;

local_variable_declaration ::= type variable_declarators;

statement ::= statement_without_trailing_substatement | labeled_statement | if_then_statement | if_then_else_statement | while_statement | for_statement;

statement_no_short_if ::= statement_without_trailing_substatement | labeled_statement_no_short_if | if_then_else_statement_no_short_if | while_statement_no_short_if | for_statement_no_short_if;

statement_without_trailing_substatement ::= block | empty_statement | expression_statement | switch_statement | do_statement | break_statement | continue_statement | return_statement | synchronized_statement | throws_statements | try_statement;

empty_statement ::= SEMICOLON;

labeled_statement ::= ID COLON statement;

labeled_statement_no_short_if ::= ID COLON statement_no_short_if;

expression_statement ::= statement_expression SEMICOLON;

statement_expression ::= assignment | preincrement_expression | postincrement_expression | predecrement_expression | postdecrement_expression | method_invocation | class_instance_creation_expression;

if_then_statement::= IF LPAREN expression RPAREN statement;

if_then_else_statement::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement;

if_then_else_statement_no_short_if ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement_no_short_if;

switch_statement ::= SWITCH LPAREN expression RPAREN switch_block;

switch_block ::= LBRACE switch_block_statement_groups switch_labels RBRACE;

switch_block_statement_groups ::= switch_block_statement_group | switch_block_statement_groups switch_block_statement_group |;

switch_block_statement_group ::= switch_labels block_statements;

switch_labels ::= switch_label | switch_labels switch_label |;

switch_label ::= CASE constant_expression COLON | DEFAULT COLON;

while_statement ::= WHILE LPAREN expression RPAREN statement;

while_statement_no_short_if ::= WHILE LPAREN expression RPAREN statement_no_short_if;

do_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON;

for_statement ::= FOR LPAREN for_init SEMICOLON expression_optional SEMICOLON for_update RPAREN statement;

for_statement_no_short_if ::= FOR LPAREN for_init COMMA expression_optional COMMA for_update RPAREN statement_no_short_if;

for_init ::= statement_expression_list | local_variable_declaration |;

for_update ::= statement_expression_list |;

statement_expression_list ::= statement_expression | statement_expression_list COMMA statement_expression;

break_statement ::= BREAK identifier_optional SEMICOLON;

continue_statement ::= CONTINUE identifier_optional SEMICOLON;

return_statement ::= RETURN expression_optional SEMICOLON;

expression_optional ::= expression |;

identifier_optional ::= ID |;

throws_statement ::= THROW expression SEMICOLON;

synchronized_statement ::= SYNCHRONIZED LPAREN expression RPAREN block;

try_statement ::= TRY block catches | TRY block catches_optional FINALLY;

catches ::= catch_clause | catches catch_clause;

catches_optional ::= catches | ;

catch_clause ::= CATCH LPAREN formal_parameter RPAREN block;

finally  ::= FINALLY block;














constant_expression ::= expression;

expression ::= assignment_expression;

assignment_expression ::= conditional_expression | assignment;

assignment ::= left_hand_side assignment_operator assignment_expression;

left_hand_side ::= expression_name | field_access | array_access;

assignment_operator ::= EQUAL | MULTEQ | DIVEQ | MODEQ | PLUSEQ | MINUSEQ | LSHIFTEQ | RSHIFTEQ | URSHIFTEQ | ANDEQ | XOREQ | OREQ;

conditional_expression ::= conditional_or_expression | conditional_or_expression  expression COLON conditional_expression;

conditional_or_expression ::= conditional_and_expression | conditional_or_expression OROR conditional_and_expression |;

conditional_and_expression ::= inclusive_or_expression | conditional_and_expression ANDAND inclusive_or_expression;

inclusive_or_expression ::= exclusive_or_expression | inclusive_or_expression | exclusive_or_expression;

exclusive_or_expression ::= and_expression | exclusive_or_expression XOR and_expression;

and_expression ::= equality_expression | and_expression AND equality_expression;
equality_expression ::= relational_expression | equality_expression EQEQ relational_expression | equality_expression NOTEQ relational_expression;

relational_expression ::= shift_expression | relational_expression LESS shift_expression | relational_expression GREATER shift_expression | relational_expression LTEQ shift_expression | relational_expression GTEQ shift_expression | relational_expression INSTANCEOF reference_type;

shift_expression ::= additive_expression | shift_expression LSHIFT additive_expression | shift_expression RSHIFT additive_expression | shift_expression URSHIFT additive_expression;

additive_expression ::= multiplicative_expression | additive_expression PLUS multiplicative_expression | additive_expression MINUS multiplicative_expression;

multiplicative_expression ::= unary_expression | multiplicative_expression MULT unary_expression | multiplicative_expression DIV unary_expression | multiplicative_expression MOD unary_expression;

cast_expression ::= LPAREN primitive_type RPAREN unary_expression | LPAREN reference_type RPAREN unary_expression_not_plus_minus;

unary_expression ::= preincrement_expression | predecrement_expression | PLUS unary_expression | MINUS unary_expression | unary_expression_not_plus_minus;

predecrement_expression ::= MINUSMINUS unary_expression;

preincrement_expression ::= PLUSPLUS unary_expression;

unary_expression_not_plus_minus ::= postfix_expression | BITNOT unary_expression | NOT unary_expression | cast_expression;

postdecrement_expression ::= postfix_expression MINUSMINUS;

postincrement_expression ::= postfix_expression PLUSPLUS;

postfix_expression ::= primary | expression_name | postincrement_expression | postdecrement_expression;

method_invocation ::= method_name LPAREN argument_list RPAREN | primary DOT ID LPAREN argument_list RPAREN | SUPER DOT ID LPAREN argument_list RPAREN;

field_access ::= primary DOT ID | SUPER DOT ID;

primary ::= primary_no_new_array | array_creation_expression;

primary_no_new_array ::= literal | THIS | LPAREN expression RPAREN | class_instance_creation_expression | field_access | method_invocation | array_access;

class_instance_creation_expression ::= NEW class_type LPAREN argument_list RPAREN;

argument_list ::= expression | argument_list COMMA expression| ;

array_creation_expression ::= NEW primitive_type dim_exprs dims | NEW class_or_interface_type dim_exprs dims;

dim_exprs ::= dim_expr | dim_exprs dim_expr;

dim_expr ::= LBRACK expression RBRACK;

dims ::= LBRACK RBRACK | dims LBRACK RBRACK | ;

array_access ::= expression_name LBRACK expression RBRACK | primary_no_new_array LBRACK expression RBRACK;














package_name ::= ID | package_name DOT ID;
type_name ::= ID | package_name DOT ID;

simple_type_name ::= ID;

expression_name ::= ID | ambiguous_name DOT ID;

method_name ::= ID | ambiguous_name DOT ID;

ambiguous_name::= ID | ambiguous_name DOT ID;

literal ::= integer_literal | floating_point_literal | boolean_literal | character_literal | string_literal | null_literal;

integer_literal ::= decimal_integer_literal | hex_integer_literal | octal_integer_literal;

decimal_integer_literal ::= decimal_numeral integer_type_suffix;

hex_integer_literal ::= hex_numeral integer_type_suffix;

octal_integer_literal ::= octal_numeral integer_type_suffix;

integer_type_suffix ::= l | L | ;

decimal_numeral ::= 0 | non_zero_digit digits;

digits ::= digit | digits digit | ;

digit ::= 0 | non_zero_digit;

non_zero_digit ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;

hex_numeral ::= 0 x hex_digit | 0 X hex_digit | hex_numeral hex_digit;

hex_digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e | f | A | B | C | D | E | F;

octal_numeral ::= 0 octal_digit | octal_numeral octal_digit;

octal_digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;

floating_point_literal ::= digits DOT digits_optional exponent_part float_type_suffix digits exponent_part float_type_suffix;

digits_optional ::= digits |;

exponent_part ::= exponent_indicator signed_integer |;

exponent_indicator ::= e | E;

signed_integer ::= sign digits;

sign ::= PLUS | MINUS |;

float_type_suffix ::= f | F | d | D |;

boolean_literal ::= TRUE | FALSE;

character_literal ::= ' single_character ' | ' escape_sequence ';

single_character ::= input_character except ' and \;

string_literal ::= " string_characters";

string_characters ::= string_character | string_characters string_character |;

string_character ::= input_character except " and \ | escape_character;

null_literal ::= NULL;

keyword ::= ABSTRACT | BOOLEAN | BREAK 
| BYTE | CASE | CATCH | CHAR | CLASS 
| CONST | CONTINUE | DEFAULT | DO | DOUBLE 
| ELSE | EXTENDS | FINAL | FINALLY | FLOAT 
| FOR | GOTO | IF | IMPLEMENTS | IMPORT | INSTANCEOF 
| INT | INTERFACE | LONG | NATIVE | NEW | PACKAGE 
| PRIVATE | PROTECTED | PUBLIC | RETURN | SHORT
 | STATIC | SUPER | SWITCH | SYNCHRONIZED | THIS 
 | THROW | THROWS | TRANSIENT | TRY | VOID | VOLATILE 
 | WHILE;














