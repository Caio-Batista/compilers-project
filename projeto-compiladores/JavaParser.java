
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 26 23:48:21 BRT 2015
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 26 23:48:21 BRT 2015
  */
public class JavaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JavaParser() {super();}

  /** Constructor which sets the default scanner. */
  public JavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\010\005\000\002\002\004\000\002\024" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\040\005\000\002\037\003\000\002\037\005\000\002\063" +
    "\002\000\002\063\003\000\002\064\002\000\002\064\003" +
    "\000\002\006\012\000\002\002\004\000\002\062\002\000" +
    "\002\062\004\000\002\003\003\000\002\003\003\000\002" +
    "\065\004\000\002\066\005\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\004\006" +
    "\000\002\005\003\000\002\007\003\000\002\007\005\000" +
    "\002\070\002\000\002\070\003\000\002\071\002\000\002" +
    "\071\004\000\002\072\002\000\002\072\005\000\002\073" +
    "\002\000\002\073\004\000\002\074\002\000\002\074\003" +
    "\000\002\054\003\000\002\075\003\000\002\075\003\000" +
    "\002\011\010\000\002\076\002\000\002\076\003\000\002" +
    "\012\004\000\002\077\006\000\002\077\004\000\002\077" +
    "\005\000\002\100\005\000\002\100\004\000\002\100\002" +
    "\000\002\101\002\000\002\101\003\000\002\013\003\000" +
    "\002\041\005\000\002\042\004\000\002\102\002\000\002" +
    "\102\004\000\002\015\011\000\002\016\005\000\002\103" +
    "\003\000\002\103\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\005\000\002\017\004\000\002\104\005" +
    "\000\002\104\005\000\002\104\004\000\002\104\004\000" +
    "\002\104\004\000\002\105\003\000\002\105\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\004\033\005\001\002\000\030\002\ufff2\004" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\001\002\000\004\151\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\014\005\uffff\006\uffff\073\uffff\077\uffff\101\uffff\001" +
    "\002\000\006\077\013\101\014\001\002\000\006\077\ufff4" +
    "\101\ufff4\001\002\000\030\002\ufff5\004\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\001\002\000\004\151\010\001\002\000\006\077" +
    "\ufff3\101\ufff3\001\002\000\030\002\ufff1\004\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\001\002\000\030\002\ufff0\004\uffde\036\020" +
    "\037\034\040\024\041\032\042\026\046\021\047\025\050" +
    "\030\051\022\001\002\000\004\004\ufff7\001\002\000\004" +
    "\004\ufffe\001\002\000\004\004\ufffb\001\002\000\004\004" +
    "\uffdd\001\002\000\004\004\ufff9\001\002\000\004\004\ufffc" +
    "\001\002\000\004\004\ufff6\001\002\000\004\002\uffef\001" +
    "\002\000\004\004\ufffd\001\002\000\004\002\uffd2\001\002" +
    "\000\004\004\ufff8\001\002\000\004\002\001\001\002\000" +
    "\004\004\ufffa\001\002\000\004\004\040\001\002\000\004" +
    "\002\uffd3\001\002\000\004\002\uffd4\001\002\000\004\151" +
    "\010\001\002\000\010\005\042\006\uffdc\073\uffdc\001\002" +
    "\000\004\151\010\001\002\000\006\006\045\073\uffda\001" +
    "\002\000\004\073\052\001\002\000\002\001\002\000\006" +
    "\073\uffd8\100\047\001\002\000\002\001\002\000\004\073" +
    "\uffd9\001\002\000\004\073\uffd7\001\002\000\004\074\uffd6" +
    "\001\002\000\004\074\uffd5\001\002\000\004\074\055\001" +
    "\002\000\004\002\uffee\001\002\000\004\101\061\001\002" +
    "\000\010\006\uffe0\073\uffe0\101\ufff4\001\002\000\006\006" +
    "\uffdb\073\uffdb\001\002\000\004\151\010\001\002\000\010" +
    "\006\uffdf\073\uffdf\101\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\006\010\005\040\003\001\001\000\006\026" +
    "\015\063\016\001\001\000\006\024\011\037\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\035\030\030\035\022\054\026\064\032\070\034" +
    "\075\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\040\001\001\000\004\071\042" +
    "\001\001\000\010\007\057\024\056\037\055\001\001\000" +
    "\004\072\043\001\001\000\002\001\001\000\004\031\045" +
    "\001\001\000\004\073\047\001\001\000\004\031\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\052" +
    "\074\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\061\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
                   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            m.append(" in line "+(s.left));
            m.append(", column "+(s.right));

        }

        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
    /*

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    */

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JavaParser$actions {
  private final JavaParser parser;

  /** Constructor */
  CUP$JavaParser$actions(JavaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JavaParser$do_action(
    int                        CUP$JavaParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaParser$parser,
    java.util.Stack            CUP$JavaParser$stack,
    int                        CUP$JavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JavaParser$result;

      /* select the action based on the action number */
      switch (CUP$JavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // class_or_interface_name ::= interface_name 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_or_interface_name",67, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // class_or_interface_name ::= class_name 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_or_interface_name",67, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // symbolic_expressions ::= INSTANCEOF class_or_interface_name 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("symbolic_expressions",66, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // symbolic_expressions ::= COMMA expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("symbolic_expressions",66, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // symbolic_expressions ::= DOT expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("symbolic_expressions",66, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // symbolic_expressions ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("symbolic_expressions",66, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // symbolic_expressions ::= LPAREN arglist_e RPAREN 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("symbolic_expressions",66, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression symbolic_expressions 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= identifier 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= THIS 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= SUPER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= NULL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= literal_expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= creating_expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= casting_expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= bit_expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= string_expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= logical_expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= testing_expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= numeric_expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // signal ::= MINUS 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("signal",65, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // signal ::= PLUS 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("signal",65, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exponent_part ::= E signal decimal_digits 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("exponent_part",12, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // do_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("do_statement",11, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parameters_e ::= COMMA parameter 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameters_e",64, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parameters_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameters_e",64, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parameter_list ::= parameter parameters_e 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameter_list",32, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parameter ::= type identifier expression_type_specifier 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // decimal_digits ::= NUMERO 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("decimal_digits",9, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arglist_e ::= arglist 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("arglist_e",63, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arglist_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("arglist_e",63, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression_type_specifier ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression_type_specifier",62, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression_type_specifier ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression_type_specifier",62, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_type_specifier ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression_type_specifier",62, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_type ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression_type",61, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression_type ::= type_specifier expression_type_specifier 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression_type",61, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression_type ::= class_name LPAREN arglist_e RPAREN 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expression_type",61, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // creating_expression ::= NEW expression_type 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("creating_expression",8, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parameter_list_e ::= parameter_list 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameter_list_e",60, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameter_list_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameter_list_e",60, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constructor_declaration ::= modifier_e identifier LPAREN parameter_list_e RPAREN statement_block 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("constructor_declaration",7, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // class_or_interface_declaration ::= interface_declaration 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_or_interface_declaration",59, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // class_or_interface_declaration ::= class_declaration 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_or_interface_declaration",59, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_declaration ::= class_or_interface_declaration 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type_declaration",42, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // field_declaration_e ::= field_declaration 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("field_declaration_e",58, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // field_declaration_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("field_declaration_e",58, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // interfaces_name_e ::= COMMA interface_name 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("interfaces_name_e",57, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // interfaces_name_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("interfaces_name_e",57, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // implements_e ::= IMPLEMENTS interface_name interfaces_name_e 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("implements_e",56, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // implements_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("implements_e",56, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // extends_e ::= EXTENDS class_name 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("extends_e",55, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // extends_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("extends_e",55, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // modifier_e ::= modifier 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier_e",54, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // modifier_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier_e",54, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // class_name ::= package_name DOT identifier 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_name",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // class_name ::= identifier 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_name",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // character ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("character",3, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // casting_expression ::= LPAREN type RPAREN expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("casting_expression",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opr_reg ::= URSHIFT 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("opr_reg",53, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opr_reg ::= RSHIFT 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("opr_reg",53, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opr_reg ::= LSHIFT 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("opr_reg",53, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opr_reg ::= RSHIFTEQ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("opr_reg",53, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comparative_expression ::= expression opr_reg expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("comparative_expression",52, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unique_expression ::= BITNOT expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("unique_expression",51, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bit_expression ::= comparative_expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bit_expression",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bit_expression ::= unique_expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bit_expression",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressions_e ::= COMMA expression 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expressions_e",48, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressions_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expressions_e",48, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arglist ::= expression expressions_e 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("arglist",0, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // class_declaration ::= modifier_e CLASS identifier extends_e implements_e LBRACE field_declaration_e RBRACE 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_declaration",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-7)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_declaration_e ::= type_declaration 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type_declaration_e",50, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_declaration_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type_declaration_e",50, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // import_statement_e ::= import_statement 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("import_statement_e",49, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // import_statement_e ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("import_statement_e",49, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // package_name ::= package_name DOT identifier 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("package_name",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // package_name ::= identifier 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("package_name",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // package_statement ::= PACKAGE package_name SEMICOLON 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("package_statement",30, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // modifier ::= TRANSIENT 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // modifier ::= ABSTRACT 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // modifier ::= SYNCHRONIZED 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // modifier ::= NATIVE 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // modifier ::= FINAL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // modifier ::= STATIC 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // modifier ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // modifier ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // modifier ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // identifier ::= ID 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("identifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= compilation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		RESULT = start_val;
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JavaParser$parser.done_parsing();
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // compilation_unit ::= package_statement import_statement_e type_declaration_e 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("compilation_unit",6, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

